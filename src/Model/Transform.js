/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/TransformDecoder', 'Model/TransformEncoder'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TransformDecoder'), require('./TransformEncoder'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.Transform = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.TransformDecoder, root.AgaveJsSdk.TransformEncoder);
  }
}(this, function(ApiClient, TransformDecoder, TransformEncoder) {
  'use strict';




  /**
   * The Transform model module.
   * @module Model/Transform
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>Transform</code>.
   * @alias module:Model/Transform
   * @class
   * @param decoders {Array.<module:Model/TransformDecoder>} The available decoders for this transform.
   * @param description {String} Description of this transform.
   * @param descriptionurl {String} The URL to find out more information.
   * @param enabled {Boolean} Whether this transform is enabled or not.
   * @param encoder {module:Model/TransformEncoder} 
   * @param name {String} The name of this transform.
   * @param tags {Array.<String>} The tags describing this transform.
   */
  var exports = function(decoders, description, descriptionurl, enabled, encoder, name, tags) {
    var _this = this;

    _this['decoders'] = decoders;
    _this['description'] = description;
    _this['descriptionurl'] = descriptionurl;
    _this['enabled'] = enabled;
    _this['encoder'] = encoder;
    _this['name'] = name;
    _this['tags'] = tags;
  };

  /**
   * Constructs a <code>Transform</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/Transform} obj Optional instance to populate.
   * @return {module:Model/Transform} The populated <code>Transform</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('decoders')) {
        obj['decoders'] = ApiClient.convertToType(data['decoders'], [TransformDecoder]);
      }
      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('descriptionurl')) {
        obj['descriptionurl'] = ApiClient.convertToType(data['descriptionurl'], 'String');
      }
      if (data.hasOwnProperty('enabled')) {
        obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
      }
      if (data.hasOwnProperty('encoder')) {
        obj['encoder'] = TransformEncoder.constructFromObject(data['encoder']);
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('tags')) {
        obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
      }
    }
    return obj;
  }

  /**
   * The available decoders for this transform.
   * @member {Array.<module:Model/TransformDecoder>} decoders
   */
  exports.prototype['decoders'] = undefined;
  /**
   * Description of this transform.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The URL to find out more information.
   * @member {String} descriptionurl
   */
  exports.prototype['descriptionurl'] = undefined;
  /**
   * Whether this transform is enabled or not.
   * @member {Boolean} enabled
   */
  exports.prototype['enabled'] = undefined;
  /**
   * @member {module:Model/TransformEncoder} encoder
   */
  exports.prototype['encoder'] = undefined;
  /**
   * The name of this transform.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The tags describing this transform.
   * @member {Array.<String>} tags
   */
  exports.prototype['tags'] = undefined;



  return exports;
}));


