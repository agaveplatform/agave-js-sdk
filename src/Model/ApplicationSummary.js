/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.ApplicationSummary = factory(root.AgaveJsSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ApplicationSummary model module.
   * @module Model/ApplicationSummary
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>ApplicationSummary</code>.
   * An abbreviated Application object returned in request in application collection queries
   * @alias module:Model/ApplicationSummary
   * @class
   * @param id {String} Unique id of this app. Comprised of the app name-version.
   * @param executionSystem {String} The system id of the execution system where this app should run.
   * @param lastModified {Date} The date this application was last modified in ISO 8601 format.
   * @param name {String} The name of the application. The name does not have to be unique, but the combination of name and version does.
   * @param isPublic {Boolean} Whether the application is public or private.
   * @param revision {Number} The number of times this application has been revised.
   * @param shortDescription {String} The short description of this application.
   * @param version {String} The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.
   */
  var exports = function(id, executionSystem, lastModified, name, isPublic, revision, shortDescription, version) {
    var _this = this;

    _this['id'] = id;
    _this['executionSystem'] = executionSystem;
    _this['lastModified'] = lastModified;
    _this['name'] = name;
    _this['isPublic'] = isPublic;
    _this['revision'] = revision;
    _this['shortDescription'] = shortDescription;
    _this['version'] = version;
  };

  /**
   * Constructs a <code>ApplicationSummary</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ApplicationSummary} obj Optional instance to populate.
   * @return {module:Model/ApplicationSummary} The populated <code>ApplicationSummary</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('executionSystem')) {
        obj['executionSystem'] = ApiClient.convertToType(data['executionSystem'], 'String');
      }
      if (data.hasOwnProperty('lastModified')) {
        obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('isPublic')) {
        obj['isPublic'] = ApiClient.convertToType(data['isPublic'], 'Boolean');
      }
      if (data.hasOwnProperty('revision')) {
        obj['revision'] = ApiClient.convertToType(data['revision'], 'Number');
      }
      if (data.hasOwnProperty('shortDescription')) {
        obj['shortDescription'] = ApiClient.convertToType(data['shortDescription'], 'String');
      }
      if (data.hasOwnProperty('version')) {
        obj['version'] = ApiClient.convertToType(data['version'], 'String');
      }
    }
    return obj;
  }

  /**
   * Unique id of this app. Comprised of the app name-version.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The system id of the execution system where this app should run.
   * @member {String} executionSystem
   */
  exports.prototype['executionSystem'] = undefined;
  /**
   * The date this application was last modified in ISO 8601 format.
   * @member {Date} lastModified
   */
  exports.prototype['lastModified'] = undefined;
  /**
   * The name of the application. The name does not have to be unique, but the combination of name and version does.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * Whether the application is public or private.
   * @member {Boolean} isPublic
   */
  exports.prototype['isPublic'] = undefined;
  /**
   * The number of times this application has been revised.
   * @member {Number} revision
   */
  exports.prototype['revision'] = undefined;
  /**
   * The short description of this application.
   * @member {String} shortDescription
   */
  exports.prototype['shortDescription'] = undefined;
  /**
   * The version of the application in #.#.# format. While the version does not need to be unique, the combination of name and version does have to be unique.
   * @member {String} version
   */
  exports.prototype['version'] = undefined;



  return exports;
}));


