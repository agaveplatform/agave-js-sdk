/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.JobSummary = factory(root.AgaveJsSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The JobSummary model module.
   * @module Model/JobSummary
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>JobSummary</code>.
   * @alias module:Model/JobSummary
   * @class
   * @param appId {String} The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
   * @param endTime {Date} The date the job ended in ISO 8601 format.
   * @param executionSystem {String} The system id of the execution system.
   * @param id {Number} The unique id of the job.
   * @param name {String} The name of the job.
   * @param owner {String} The job owner.
   * @param startTime {Date} The date the job started in ISO 8601 format.
   * @param status {String} The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED
   */
  var exports = function(appId, endTime, executionSystem, id, name, owner, startTime, status) {
    var _this = this;

    _this['appId'] = appId;
    _this['endTime'] = endTime;
    _this['executionSystem'] = executionSystem;
    _this['id'] = id;
    _this['name'] = name;
    _this['owner'] = owner;
    _this['startTime'] = startTime;
    _this['status'] = status;
  };

  /**
   * Constructs a <code>JobSummary</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/JobSummary} obj Optional instance to populate.
   * @return {module:Model/JobSummary} The populated <code>JobSummary</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('appId')) {
        obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
      }
      if (data.hasOwnProperty('endTime')) {
        obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
      }
      if (data.hasOwnProperty('executionSystem')) {
        obj['executionSystem'] = ApiClient.convertToType(data['executionSystem'], 'String');
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('owner')) {
        obj['owner'] = ApiClient.convertToType(data['owner'], 'String');
      }
      if (data.hasOwnProperty('startTime')) {
        obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
    }
    return obj;
  }

  /**
   * The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
   * @member {String} appId
   */
  exports.prototype['appId'] = undefined;
  /**
   * The date the job ended in ISO 8601 format.
   * @member {Date} endTime
   */
  exports.prototype['endTime'] = undefined;
  /**
   * The system id of the execution system.
   * @member {String} executionSystem
   */
  exports.prototype['executionSystem'] = undefined;
  /**
   * The unique id of the job.
   * @member {Number} id
   */
  exports.prototype['id'] = undefined;
  /**
   * The name of the job.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The job owner.
   * @member {String} owner
   */
  exports.prototype['owner'] = undefined;
  /**
   * The date the job started in ISO 8601 format.
   * @member {Date} startTime
   */
  exports.prototype['startTime'] = undefined;
  /**
   * The status of the job. Possible values are: PENDING, STAGING_INPUTS, CLEANING_UP, ARCHIVING, STAGING_JOB, FINISHED, KILLED, FAILED, STOPPED, RUNNING, PAUSED, QUEUED, SUBMITTING, STAGED, PROCESSING_INPUTS, ARCHIVING_FINISHED, ARCHIVING_FAILED
   * @member {String} status
   */
  exports.prototype['status'] = undefined;



  return exports;
}));


