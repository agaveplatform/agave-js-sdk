/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.TransformRequest = factory(root.AgaveJsSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The TransformRequest model module.
   * @module Model/TransformRequest
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>TransformRequest</code>.
   * @alias module:Model/TransformRequest
   * @class
   * @param nativeFormat {String} The original file type of the file. If not given, the file type is assumed to be raw.
   * @param url {String} The uri to which the transformed file will be staged.
   * @param callbackUrl {String} The URI to notify when the transfer is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}
   */
  var exports = function(nativeFormat, url, callbackUrl) {
    var _this = this;

    _this['nativeFormat'] = nativeFormat;
    _this['url'] = url;
    _this['callbackUrl'] = callbackUrl;
  };

  /**
   * Constructs a <code>TransformRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/TransformRequest} obj Optional instance to populate.
   * @return {module:Model/TransformRequest} The populated <code>TransformRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('nativeFormat')) {
        obj['nativeFormat'] = ApiClient.convertToType(data['nativeFormat'], 'String');
      }
      if (data.hasOwnProperty('url')) {
        obj['url'] = ApiClient.convertToType(data['url'], 'String');
      }
      if (data.hasOwnProperty('callbackUrl')) {
        obj['callbackUrl'] = ApiClient.convertToType(data['callbackUrl'], 'String');
      }
    }
    return obj;
  }

  /**
   * The original file type of the file. If not given, the file type is assumed to be raw.
   * @member {String} nativeFormat
   */
  exports.prototype['nativeFormat'] = undefined;
  /**
   * The uri to which the transformed file will be staged.
   * @member {String} url
   */
  exports.prototype['url'] = undefined;
  /**
   * The URI to notify when the transfer is complete. This can be an email address or http URL. If a URL is given, a GET will be made to this address. URL templating is supported. Valid template values are: ${NAME}, ${SOURCE_FORMAT}, ${DEST_FORMAT}, ${STATUS}
   * @member {String} callbackUrl
   */
  exports.prototype['callbackUrl'] = undefined;



  return exports;
}));


