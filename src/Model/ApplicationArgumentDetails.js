/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.ApplicationArgumentDetails = factory(root.AgaveJsSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ApplicationArgumentDetails model module.
   * @module Model/ApplicationArgumentDetails
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>ApplicationArgumentDetails</code>.
   * @alias module:Model/ApplicationArgumentDetails
   * @class
   * @param showArgument {Boolean} Whether the argument value should be passed into the wrapper at run time
   * @param repeatArgument {Boolean} Whether the argument value should be repeated in front of each user-supplied input before injection into the wrapper template at runtime
   */
  var exports = function(showArgument, repeatArgument) {
    var _this = this;




    _this['showArgument'] = showArgument;
    _this['repeatArgument'] = repeatArgument;
  };

  /**
   * Constructs a <code>ApplicationArgumentDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ApplicationArgumentDetails} obj Optional instance to populate.
   * @return {module:Model/ApplicationArgumentDetails} The populated <code>ApplicationArgumentDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('label')) {
        obj['label'] = ApiClient.convertToType(data['label'], 'String');
      }
      if (data.hasOwnProperty('argument')) {
        obj['argument'] = ApiClient.convertToType(data['argument'], 'String');
      }
      if (data.hasOwnProperty('showArgument')) {
        obj['showArgument'] = ApiClient.convertToType(data['showArgument'], 'Boolean');
      }
      if (data.hasOwnProperty('repeatArgument')) {
        obj['repeatArgument'] = ApiClient.convertToType(data['repeatArgument'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * Description of this input.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * The label for this input
   * @member {String} label
   */
  exports.prototype['label'] = undefined;
  /**
   * The command line value of this input (ex -n, --name, -name, etc)
   * @member {String} argument
   */
  exports.prototype['argument'] = undefined;
  /**
   * Whether the argument value should be passed into the wrapper at run time
   * @member {Boolean} showArgument
   * @default false
   */
  exports.prototype['showArgument'] = false;
  /**
   * Whether the argument value should be repeated in front of each user-supplied input before injection into the wrapper template at runtime
   * @member {Boolean} repeatArgument
   * @default false
   */
  exports.prototype['repeatArgument'] = false;



  return exports;
}));


