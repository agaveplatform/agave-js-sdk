/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/BatchQueue', 'Model/BatchSchedulerType', 'Model/SystemExecutionType', 'Model/SystemLoginConfig', 'Model/SystemStatusType', 'Model/SystemStorageConfig', 'Model/SystemType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./BatchQueue'), require('./BatchSchedulerType'), require('./SystemExecutionType'), require('./SystemLoginConfig'), require('./SystemStatusType'), require('./SystemStorageConfig'), require('./SystemType'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.SystemRequest = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.BatchQueue, root.AgaveJsSdk.BatchSchedulerType, root.AgaveJsSdk.SystemExecutionType, root.AgaveJsSdk.SystemLoginConfig, root.AgaveJsSdk.SystemStatusType, root.AgaveJsSdk.SystemStorageConfig, root.AgaveJsSdk.SystemType);
  }
}(this, function(ApiClient, BatchQueue, BatchSchedulerType, SystemExecutionType, SystemLoginConfig, SystemStatusType, SystemStorageConfig, SystemType) {
  'use strict';




  /**
   * The SystemRequest model module.
   * @module Model/SystemRequest
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>SystemRequest</code>.
   * @alias module:Model/SystemRequest
   * @class
   * @param id {String} Unique identifier for this system.
   * @param name {String} Common name for this system.
   * @param status {module:Model/SystemStatusType} 
   * @param storage {module:Model/SystemStorageConfig} 
   * @param type {module:Model/SystemType} 
   */
  var exports = function(id, name, status, storage, type) {
    var _this = this;




    _this['id'] = id;



    _this['name'] = name;





    _this['status'] = status;
    _this['storage'] = storage;
    _this['type'] = type;

  };

  /**
   * Constructs a <code>SystemRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/SystemRequest} obj Optional instance to populate.
   * @return {module:Model/SystemRequest} The populated <code>SystemRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('description')) {
        obj['description'] = ApiClient.convertToType(data['description'], 'String');
      }
      if (data.hasOwnProperty('environment')) {
        obj['environment'] = ApiClient.convertToType(data['environment'], 'String');
      }
      if (data.hasOwnProperty('executionType')) {
        obj['executionType'] = SystemExecutionType.constructFromObject(data['executionType']);
      }
      if (data.hasOwnProperty('id')) {
        obj['id'] = ApiClient.convertToType(data['id'], 'String');
      }
      if (data.hasOwnProperty('login')) {
        obj['login'] = SystemLoginConfig.constructFromObject(data['login']);
      }
      if (data.hasOwnProperty('maxSystemJobs')) {
        obj['maxSystemJobs'] = ApiClient.convertToType(data['maxSystemJobs'], 'Number');
      }
      if (data.hasOwnProperty('maxSystemJobsPerUser')) {
        obj['maxSystemJobsPerUser'] = ApiClient.convertToType(data['maxSystemJobsPerUser'], 'Number');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('queues')) {
        obj['queues'] = ApiClient.convertToType(data['queues'], [BatchQueue]);
      }
      if (data.hasOwnProperty('scheduler')) {
        obj['scheduler'] = BatchSchedulerType.constructFromObject(data['scheduler']);
      }
      if (data.hasOwnProperty('scratchDir')) {
        obj['scratchDir'] = ApiClient.convertToType(data['scratchDir'], 'String');
      }
      if (data.hasOwnProperty('site')) {
        obj['site'] = ApiClient.convertToType(data['site'], 'String');
      }
      if (data.hasOwnProperty('startupScript')) {
        obj['startupScript'] = ApiClient.convertToType(data['startupScript'], 'String');
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = SystemStatusType.constructFromObject(data['status']);
      }
      if (data.hasOwnProperty('storage')) {
        obj['storage'] = SystemStorageConfig.constructFromObject(data['storage']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = SystemType.constructFromObject(data['type']);
      }
      if (data.hasOwnProperty('workDir')) {
        obj['workDir'] = ApiClient.convertToType(data['workDir'], 'String');
      }
    }
    return obj;
  }

  /**
   * Verbose description of this system.
   * @member {String} description
   */
  exports.prototype['description'] = undefined;
  /**
   * Environment variables to set upon login prior to job submission.
   * @member {String} environment
   */
  exports.prototype['environment'] = undefined;
  /**
   * @member {module:Model/SystemExecutionType} executionType
   */
  exports.prototype['executionType'] = undefined;
  /**
   * Unique identifier for this system.
   * @member {String} id
   */
  exports.prototype['id'] = undefined;
  /**
   * @member {module:Model/SystemLoginConfig} login
   */
  exports.prototype['login'] = undefined;
  /**
   * The maximum number of jobs that can be simultaneously run on the system across all queues.
   * @member {Number} maxSystemJobs
   */
  exports.prototype['maxSystemJobs'] = undefined;
  /**
   * The maximum number of jobs that can be simultaneously run on the system across all queues by a single user.
   * @member {Number} maxSystemJobsPerUser
   */
  exports.prototype['maxSystemJobsPerUser'] = undefined;
  /**
   * Common name for this system.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The execution paradigm used to run jobs on this system.
   * @member {Array.<module:Model/BatchQueue>} queues
   */
  exports.prototype['queues'] = undefined;
  /**
   * @member {module:Model/BatchSchedulerType} scheduler
   */
  exports.prototype['scheduler'] = undefined;
  /**
   * The scratch directory where job execution directories will be created at runtime. The workDir is used if this is not specified.
   * @member {String} scratchDir
   */
  exports.prototype['scratchDir'] = undefined;
  /**
   * The site associated with this system.
   * @member {String} site
   */
  exports.prototype['site'] = undefined;
  /**
   * Script to be run after login and prior to execution.
   * @member {String} startupScript
   */
  exports.prototype['startupScript'] = undefined;
  /**
   * @member {module:Model/SystemStatusType} status
   */
  exports.prototype['status'] = undefined;
  /**
   * @member {module:Model/SystemStorageConfig} storage
   */
  exports.prototype['storage'] = undefined;
  /**
   * @member {module:Model/SystemType} type
   */
  exports.prototype['type'] = undefined;
  /**
   * The work directory where job execution directories will be created at runtime. This is used if scratchDir is not specified. If neither are specified, the job directory will be created in the system homeDir.
   * @member {String} workDir
   */
  exports.prototype['workDir'] = undefined;



  return exports;
}));


