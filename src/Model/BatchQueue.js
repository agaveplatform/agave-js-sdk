/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.BatchQueue = factory(root.AgaveJsSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The BatchQueue model module.
   * @module Model/BatchQueue
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>BatchQueue</code>.
   * @alias module:Model/BatchQueue
   * @class
   * @param customDirectives {String} Any custom directives that should be appended to scheduler directives. ex. #$ -A TG-12345
   * @param isDefault {Boolean} Is this the default queue for the system.
   * @param maxJobs {Number} The maximum number of jobs that can be in queue at once.
   * @param maxUserJobs {Number} The maximum number of jobs per user that can be in queue at once.
   * @param maxNodes {String} The max nodes available per node to jobs submitted to this queue.
   * @param maxMemoryPerNode {String} The max memory available per node to jobs submitted to this queue.
   * @param maxProcessorsPerNode {Number} The max processors per node available to jobs submitted to this queue.
   * @param maxRequestedTime {String} The max length of jobs submitted to this queue in hhh:mm:ss format.
   * @param name {String} The name of the batch queue.
   */
  var exports = function(customDirectives, isDefault, maxJobs, maxUserJobs, maxNodes, maxMemoryPerNode, maxProcessorsPerNode, maxRequestedTime, name) {
    var _this = this;

    _this['customDirectives'] = customDirectives;
    _this['isDefault'] = isDefault;
    _this['maxJobs'] = maxJobs;
    _this['maxUserJobs'] = maxUserJobs;
    _this['maxNodes'] = maxNodes;
    _this['maxMemoryPerNode'] = maxMemoryPerNode;
    _this['maxProcessorsPerNode'] = maxProcessorsPerNode;
    _this['maxRequestedTime'] = maxRequestedTime;
    _this['name'] = name;
  };

  /**
   * Constructs a <code>BatchQueue</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/BatchQueue} obj Optional instance to populate.
   * @return {module:Model/BatchQueue} The populated <code>BatchQueue</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('customDirectives')) {
        obj['customDirectives'] = ApiClient.convertToType(data['customDirectives'], 'String');
      }
      if (data.hasOwnProperty('isDefault')) {
        obj['isDefault'] = ApiClient.convertToType(data['isDefault'], 'Boolean');
      }
      if (data.hasOwnProperty('maxJobs')) {
        obj['maxJobs'] = ApiClient.convertToType(data['maxJobs'], 'Number');
      }
      if (data.hasOwnProperty('maxUserJobs')) {
        obj['maxUserJobs'] = ApiClient.convertToType(data['maxUserJobs'], 'Number');
      }
      if (data.hasOwnProperty('maxNodes')) {
        obj['maxNodes'] = ApiClient.convertToType(data['maxNodes'], 'String');
      }
      if (data.hasOwnProperty('maxMemoryPerNode')) {
        obj['maxMemoryPerNode'] = ApiClient.convertToType(data['maxMemoryPerNode'], 'String');
      }
      if (data.hasOwnProperty('maxProcessorsPerNode')) {
        obj['maxProcessorsPerNode'] = ApiClient.convertToType(data['maxProcessorsPerNode'], 'Number');
      }
      if (data.hasOwnProperty('maxRequestedTime')) {
        obj['maxRequestedTime'] = ApiClient.convertToType(data['maxRequestedTime'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
    }
    return obj;
  }

  /**
   * Any custom directives that should be appended to scheduler directives. ex. #$ -A TG-12345
   * @member {String} customDirectives
   */
  exports.prototype['customDirectives'] = undefined;
  /**
   * Is this the default queue for the system.
   * @member {Boolean} isDefault
   */
  exports.prototype['isDefault'] = undefined;
  /**
   * The maximum number of jobs that can be in queue at once.
   * @member {Number} maxJobs
   */
  exports.prototype['maxJobs'] = undefined;
  /**
   * The maximum number of jobs per user that can be in queue at once.
   * @member {Number} maxUserJobs
   */
  exports.prototype['maxUserJobs'] = undefined;
  /**
   * The max nodes available per node to jobs submitted to this queue.
   * @member {String} maxNodes
   */
  exports.prototype['maxNodes'] = undefined;
  /**
   * The max memory available per node to jobs submitted to this queue.
   * @member {String} maxMemoryPerNode
   */
  exports.prototype['maxMemoryPerNode'] = undefined;
  /**
   * The max processors per node available to jobs submitted to this queue.
   * @member {Number} maxProcessorsPerNode
   */
  exports.prototype['maxProcessorsPerNode'] = undefined;
  /**
   * The max length of jobs submitted to this queue in hhh:mm:ss format.
   * @member {String} maxRequestedTime
   */
  exports.prototype['maxRequestedTime'] = undefined;
  /**
   * The name of the batch queue.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;



  return exports;
}));


