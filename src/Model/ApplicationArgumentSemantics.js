/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.ApplicationArgumentSemantics = factory(root.AgaveJsSdk.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The ApplicationArgumentSemantics model module.
   * @module Model/ApplicationArgumentSemantics
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>ApplicationArgumentSemantics</code>.
   * Describes the semantic definition of this input/output and the filetypes it represents. Multiple ontologies and values are supported. &lt;a href&#x3D;\&quot;http://agaveapi.co/documentation/tutorials/app-management-tutorial/#app-outputs\&quot;&gt;Read more.&lt;/a&gt;
   * @alias module:Model/ApplicationArgumentSemantics
   * @class
   * @param fileTypes {Array.<String>} The file types acceptable for this output.
   * @param maxCardinality {Number} The maximum number of times this output may appear.
   * @param minCardinality {Number} The minimum number of times this output may appear. -1 is unlimited
   * @param ontology {Array.<String>} 
   */
  var exports = function(fileTypes, maxCardinality, minCardinality, ontology) {
    var _this = this;

    _this['fileTypes'] = fileTypes;
    _this['maxCardinality'] = maxCardinality;
    _this['minCardinality'] = minCardinality;
    _this['ontology'] = ontology;
  };

  /**
   * Constructs a <code>ApplicationArgumentSemantics</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/ApplicationArgumentSemantics} obj Optional instance to populate.
   * @return {module:Model/ApplicationArgumentSemantics} The populated <code>ApplicationArgumentSemantics</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('fileTypes')) {
        obj['fileTypes'] = ApiClient.convertToType(data['fileTypes'], ['String']);
      }
      if (data.hasOwnProperty('maxCardinality')) {
        obj['maxCardinality'] = ApiClient.convertToType(data['maxCardinality'], 'Number');
      }
      if (data.hasOwnProperty('minCardinality')) {
        obj['minCardinality'] = ApiClient.convertToType(data['minCardinality'], 'Number');
      }
      if (data.hasOwnProperty('ontology')) {
        obj['ontology'] = ApiClient.convertToType(data['ontology'], ['String']);
      }
    }
    return obj;
  }

  /**
   * The file types acceptable for this output.
   * @member {Array.<String>} fileTypes
   */
  exports.prototype['fileTypes'] = undefined;
  /**
   * The maximum number of times this output may appear.
   * @member {Number} maxCardinality
   */
  exports.prototype['maxCardinality'] = undefined;
  /**
   * The minimum number of times this output may appear. -1 is unlimited
   * @member {Number} minCardinality
   */
  exports.prototype['minCardinality'] = undefined;
  /**
   * @member {Array.<String>} ontology
   */
  exports.prototype['ontology'] = undefined;



  return exports;
}));


