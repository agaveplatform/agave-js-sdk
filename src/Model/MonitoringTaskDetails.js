/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/MonitoringTaskSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./MonitoringTaskSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.MonitoringTaskDetails = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.MonitoringTaskSummary);
  }
}(this, function(ApiClient, MonitoringTaskSummary) {
  'use strict';




  /**
   * The MonitoringTaskDetails model module.
   * @module Model/MonitoringTaskDetails
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>MonitoringTaskDetails</code>.
   * Detailed description of a monitoring task
   * @alias module:Model/MonitoringTaskDetails
   * @class
   * @implements module:Model/MonitoringTaskSummary
   * @param active {Boolean} Whether this monitor is currently active.
   * @param frequency {Number} The interval in minutes on which this monitor will run. Minimum is 5. Default is 720.
   * @param target {String} The id of the sytem to be monitored. This must be an active system registered with the Systems service.
   * @param updateSystemStatus {Boolean} Whether this Monitor should update the system status when the results change. You must have the ADMIN role on the target system to use this feature.
   * @param id {String} The unique id of the monitor
   */
  var exports = function(active, frequency, target, updateSystemStatus, id) {
    var _this = this;

    MonitoringTaskSummary.call(_this, active, frequency, target, updateSystemStatus, id);
  };

  /**
   * Constructs a <code>MonitoringTaskDetails</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/MonitoringTaskDetails} obj Optional instance to populate.
   * @return {module:Model/MonitoringTaskDetails} The populated <code>MonitoringTaskDetails</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      MonitoringTaskSummary.constructFromObject(data, obj);
    }
    return obj;
  }


  // Implement MonitoringTaskSummary interface:
  /**
   * Whether this monitor is currently active.
   * @member {Boolean} active
   * @default true
   */
exports.prototype['active'] = true;

  /**
   * The interval in minutes on which this monitor will run. Minimum is 5. Default is 720.
   * @member {Number} frequency
   */
exports.prototype['frequency'] = undefined;

  /**
   * Internal user account used to perform the check.
   * @member {String} internalUsername
   */
exports.prototype['internalUsername'] = undefined;

  /**
   * The id of the sytem to be monitored. This must be an active system registered with the Systems service.
   * @member {String} target
   */
exports.prototype['target'] = undefined;

  /**
   * Whether this Monitor should update the system status when the results change. You must have the ADMIN role on the target system to use this feature.
   * @member {Boolean} updateSystemStatus
   * @default false
   */
exports.prototype['updateSystemStatus'] = false;

  /**
   * The unique id of the monitor
   * @member {String} id
   */
exports.prototype['id'] = undefined;



  return exports;
}));


