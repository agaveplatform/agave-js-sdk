/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Notification'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./Notification'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.JobSubmission = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.Notification);
  }
}(this, function(ApiClient, Notification) {
  'use strict';




  /**
   * The JobSubmission model module.
   * @module Model/JobSubmission
   * @version 0.1.0
   */

  /**
   * Constructs a new <code>JobSubmission</code>.
   * This represents the request made to the Agave jobs api to run a registered application.
   * @alias module:Model/JobSubmission
   * @class
   * @param archive {Boolean} Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.
   * @param archivePath {String} The path of the archive folder for this job on the archiveSystem. Defaults to default storage system of the user
   * @param archiveSystem {String} The system on which the job data will be archived
   * @param inputs {String} The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.
   * @param name {String} The name of the job.
   * @param maxMemory {String} The maximum amount of memory needed for this application to run given in GB.
   * @param nodeCount {Number} The number of nodes this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.
   * @param notifications {Array.<module:Model/Notification>} An array of notifications you wish to receive.
   * @param parameters {Object} The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.
   * @param processorsPerNode {Number} The number of processors this application should utilize while running.
   * @param batchQueue {String} The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
   * @param maxRunTime {String} The estimated compute time needed for this application to complete given in hh:mm:ss format.
   * @param appId {String} The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
   */
  var exports = function(archive, archivePath, archiveSystem, inputs, name, maxMemory, nodeCount, notifications, parameters, processorsPerNode, batchQueue, maxRunTime, appId) {
    var _this = this;

    _this['archive'] = archive;
    _this['archivePath'] = archivePath;
    _this['archiveSystem'] = archiveSystem;
    _this['inputs'] = inputs;
    _this['name'] = name;
    _this['maxMemory'] = maxMemory;
    _this['nodeCount'] = nodeCount;
    _this['notifications'] = notifications;
    _this['parameters'] = parameters;
    _this['processorsPerNode'] = processorsPerNode;
    _this['batchQueue'] = batchQueue;
    _this['maxRunTime'] = maxRunTime;
    _this['appId'] = appId;
  };

  /**
   * Constructs a <code>JobSubmission</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:Model/JobSubmission} obj Optional instance to populate.
   * @return {module:Model/JobSubmission} The populated <code>JobSubmission</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('archive')) {
        obj['archive'] = ApiClient.convertToType(data['archive'], 'Boolean');
      }
      if (data.hasOwnProperty('archivePath')) {
        obj['archivePath'] = ApiClient.convertToType(data['archivePath'], 'String');
      }
      if (data.hasOwnProperty('archiveSystem')) {
        obj['archiveSystem'] = ApiClient.convertToType(data['archiveSystem'], 'String');
      }
      if (data.hasOwnProperty('inputs')) {
        obj['inputs'] = ApiClient.convertToType(data['inputs'], 'String');
      }
      if (data.hasOwnProperty('name')) {
        obj['name'] = ApiClient.convertToType(data['name'], 'String');
      }
      if (data.hasOwnProperty('maxMemory')) {
        obj['maxMemory'] = ApiClient.convertToType(data['maxMemory'], 'String');
      }
      if (data.hasOwnProperty('nodeCount')) {
        obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'Number');
      }
      if (data.hasOwnProperty('notifications')) {
        obj['notifications'] = ApiClient.convertToType(data['notifications'], [Notification]);
      }
      if (data.hasOwnProperty('parameters')) {
        obj['parameters'] = ApiClient.convertToType(data['parameters'], Object);
      }
      if (data.hasOwnProperty('processorsPerNode')) {
        obj['processorsPerNode'] = ApiClient.convertToType(data['processorsPerNode'], 'Number');
      }
      if (data.hasOwnProperty('batchQueue')) {
        obj['batchQueue'] = ApiClient.convertToType(data['batchQueue'], 'String');
      }
      if (data.hasOwnProperty('maxRunTime')) {
        obj['maxRunTime'] = ApiClient.convertToType(data['maxRunTime'], 'String');
      }
      if (data.hasOwnProperty('appId')) {
        obj['appId'] = ApiClient.convertToType(data['appId'], 'String');
      }
    }
    return obj;
  }

  /**
   * Whether the output from this job should be archived. If true, all new files created by this application's execution will be archived to the archivePath in the user's default storage system.
   * @member {Boolean} archive
   */
  exports.prototype['archive'] = undefined;
  /**
   * The path of the archive folder for this job on the archiveSystem. Defaults to default storage system of the user
   * @member {String} archivePath
   */
  exports.prototype['archivePath'] = undefined;
  /**
   * The system on which the job data will be archived
   * @member {String} archiveSystem
   */
  exports.prototype['archiveSystem'] = undefined;
  /**
   * The application specific input files needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. Inputs may be given as relative paths in the user's default storage system or as URI. If a URI is given, the data will be staged in by the IO service and made avaialble to the application at run time.
   * @member {String} inputs
   */
  exports.prototype['inputs'] = undefined;
  /**
   * The name of the job.
   * @member {String} name
   */
  exports.prototype['name'] = undefined;
  /**
   * The maximum amount of memory needed for this application to run given in GB.
   * @member {String} maxMemory
   */
  exports.prototype['maxMemory'] = undefined;
  /**
   * The number of nodes this application should utilize while running. If the application is not of executionType PARALLEL, this should be 1.
   * @member {Number} nodeCount
   */
  exports.prototype['nodeCount'] = undefined;
  /**
   * An array of notifications you wish to receive.
   * @member {Array.<module:Model/Notification>} notifications
   */
  exports.prototype['notifications'] = undefined;
  /**
   * The application specific parameters needed for this job. These vary from application to application and should be entered as multiple individual parameters in the form. The actual dataType will be determined by the application description.
   * @member {Object} parameters
   */
  exports.prototype['parameters'] = undefined;
  /**
   * The number of processors this application should utilize while running.
   * @member {Number} processorsPerNode
   */
  exports.prototype['processorsPerNode'] = undefined;
  /**
   * The queue to which this job should be submitted. This is optional and only applies when the execution system has a batch scheduler.
   * @member {String} batchQueue
   */
  exports.prototype['batchQueue'] = undefined;
  /**
   * The estimated compute time needed for this application to complete given in hh:mm:ss format.
   * @member {String} maxRunTime
   */
  exports.prototype['maxRunTime'] = undefined;
  /**
   * The unique name of the application being run by this job. This must be a valid application that the calling user has permission to run.
   * @member {String} appId
   */
  exports.prototype['appId'] = undefined;



  return exports;
}));


