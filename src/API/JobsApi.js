/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/FileInfo', 'Model/Job', 'Model/JobHistory', 'Model/JobRequest', 'Model/JobResubmitAction', 'Model/JobStatusSummary', 'Model/Permission'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/FileInfo'), require('../Model/Job'), require('../Model/JobHistory'), require('../Model/JobRequest'), require('../Model/JobResubmitAction'), require('../Model/JobStatusSummary'), require('../Model/Permission'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.JobsApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.FileInfo, root.AgaveJsSdk.Job, root.AgaveJsSdk.JobHistory, root.AgaveJsSdk.JobRequest, root.AgaveJsSdk.JobResubmitAction, root.AgaveJsSdk.JobStatusSummary, root.AgaveJsSdk.Permission);
  }
}(this, function(ApiClient, FileInfo, Job, JobHistory, JobRequest, JobResubmitAction, JobStatusSummary, Permission) {
  'use strict';

  /**
   * Jobs service.
   * @module API/JobsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new JobsApi. 
   * @alias module:API/JobsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a user permission for the given job.
     * @param {String} jobId The id of the job.
     * @param {module:Model/Permission} body The permission add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.addJobPermissionWithHttpInfo = function(jobId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling addJobPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addJobPermission");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/pems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a user permission for the given job.
     * @param {String} jobId The id of the job.
     * @param {module:Model/Permission} body The permission add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.addJobPermission = function(jobId, body, opts) {
      return this.addJobPermissionWithHttpInfo(jobId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all permissions on an job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearJobPermissionsWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling clearJobPermissions");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/pems', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions on an job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearJobPermissions = function(jobId, opts) {
      return this.clearJobPermissionsWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a job from history of the user
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteJobWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a job from history of the user
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteJob = function(jobId, opts) {
      return this.deleteJobWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all permissions for the given user on an job.
     * @param {String} jobId The id of the job for which to delete the user permissions.
     * @param {String} username The username for whom to delete permissions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteJobPermissionWithHttpInfo = function(jobId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling deleteJobPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteJobPermission");
      }


      var pathParams = {
        'jobId': jobId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/pems/{username}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions for the given user on an job.
     * @param {String} jobId The id of the job for which to delete the user permissions.
     * @param {String} username The username for whom to delete permissions
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteJobPermission = function(jobId, username, opts) {
      return this.deleteJobPermissionWithHttpInfo(jobId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download an output file from a specific job.
     * @param {String} jobId The id of the job.
     * @param {String} filePath The path to an output file relative to the job output directory. 
     * @param {Boolean} force If true, the Content-Disposition header is set to force a file download from the browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.downloadJobOutputWithHttpInfo = function(jobId, filePath, force) {
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling downloadJobOutput");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling downloadJobOutput");
      }

      // verify the required parameter 'force' is set
      if (force === undefined || force === null) {
        throw new Error("Missing the required parameter 'force' when calling downloadJobOutput");
      }


      var pathParams = {
        'jobId': jobId,
        'filePath': filePath
      };
      var queryParams = {
        'force': force,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/outputs/media/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download an output file from a specific job.
     * @param {String} jobId The id of the job.
     * @param {String} filePath The path to an output file relative to the job output directory. 
     * @param {Boolean} force If true, the Content-Disposition header is set to force a file download from the browser.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.downloadJobOutput = function(jobId, filePath, force) {
      return this.downloadJobOutputWithHttpInfo(jobId, filePath, force)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of the job with the specific job id.
     * @param {Number} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Job} and HTTP response
     */
    this.getJobDetailsWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobDetails");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Job;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of the job with the specific job id.
     * @param {Number} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Job}
     */
    this.getJobDetails = function(jobId, opts) {
      return this.getJobDetailsWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the history of this job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/JobHistory>} and HTTP response
     */
    this.getJobHistoryWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobHistory");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [JobHistory];

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the history of this job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/JobHistory>}
     */
    this.getJobHistory = function(jobId, opts) {
      return this.getJobHistoryWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific user permission for a job.
     * @param {String} jobId The id of the job.
     * @param {String} username The username of the api user associated with the permission.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.getJobPermissionWithHttpInfo = function(jobId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getJobPermission");
      }


      var pathParams = {
        'jobId': jobId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/pems/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific user permission for a job.
     * @param {String} jobId The id of the job.
     * @param {String} username The username of the api user associated with the permission.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.getJobPermission = function(jobId, username, opts) {
      return this.getJobPermissionWithHttpInfo(jobId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the status of the job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/JobStatusSummary} and HTTP response
     */
    this.getJobStatusWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling getJobStatus");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JobStatusSummary;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/status', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the status of the job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/JobStatusSummary}
     */
    this.getJobStatus = function(jobId, opts) {
      return this.getJobStatusWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the output folder for a job.
     * @param {String} jobId The id of the job.
     * @param {String} filePath The path to an output file or folder relative to the job output directory. This resource will follow data around as it moves from the execution system to archival storage.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/FileInfo>} and HTTP response
     */
    this.listJobOutputsWithHttpInfo = function(jobId, filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling listJobOutputs");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling listJobOutputs");
      }


      var pathParams = {
        'jobId': jobId,
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FileInfo];

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/outputs/listings/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the output folder for a job.
     * @param {String} jobId The id of the job.
     * @param {String} filePath The path to an output file or folder relative to the job output directory. This resource will follow data around as it moves from the execution system to archival storage.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/FileInfo>}
     */
    this.listJobOutputs = function(jobId, filePath, opts) {
      return this.listJobOutputsWithHttpInfo(jobId, filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the permissions granted for this job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results to skip in the result set for this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Permission>} and HTTP response
     */
    this.listJobPermissionsWithHttpInfo = function(jobId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling listJobPermissions");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/pems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the permissions granted for this job.
     * @param {String} jobId The id of the job.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results to skip in the result set for this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Permission>}
     */
    this.listJobPermissions = function(jobId, opts) {
      return this.listJobPermissionsWithHttpInfo(jobId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of jobs the authenticated user had submitted.
     * @param {Object} opts Optional parameters
     * @param {String} opts.appId The id of the app run by the job.
     * @param {String} opts.archive Boolean flag stating whether the job output was archived. (Acceptable values are: \&quot;true\&quot;, \&quot;false\&quot;) (default to true)
     * @param {String} opts.archivePath Path on the archive system where the job output was archived if the archive flag was true.
     * @param {String} opts.archiveSystem The id of the system where the job output was archived if the archive flag was true.
     * @param {String} opts.batchQueue The system queue in which the job ran.
     * @param {String} opts.executionSystem The execution system where the job ran.
     * @param {String} opts.id The id of the job.
     * @param {String} opts.inputs The job inputs. Note, this is a partial text search.
     * @param {String} opts.localId The local job id of the job on the execution system.
     * @param {String} opts.maxRuntime The maximum run time of the job in HH:mm:ss format.
     * @param {String} opts.memoryPerNode The memory requested by the job specified in GB.
     * @param {String} opts.name The name of the job.
     * @param {Number} opts.nodeCount The number of nodes requested for the job.
     * @param {String} opts.outputPath The remote work directory path of the job.
     * @param {String} opts.parameters The job parameters. Note, this is a partial text search.
     * @param {Number} opts.processorsPerNode The number of processors per node requested by the job.
     * @param {Number} opts.retries The number of retry attempts made on this job.
     * @param {String} opts.startTime The date the job began running. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as &#39;yesterday&#39; or &#39;3 days ago&#39;.
     * @param {module:Model/String} opts.status The job status.
     * @param {String} opts.submitTime The date the job was submitted to the remote execution system to run. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as &#39;yesterday&#39; or &#39;3 days ago&#39;.
     * @param {String} opts.visible Boolean flag indicating whether or not to show deleted jobs. Defaults to false. (Acceptable values are: \&quot;true\&quot;, \&quot;false\&quot;) (default to true)
     * @param {Number} opts.limit Boolean flag indicating whether or not to show deleted jobs. Defaults to false.
     * @param {Number} opts.offset Boolean flag indicating whether or not to show deleted jobs. Defaults to false.
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Job>} and HTTP response
     */
    this.listJobsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'appId': opts['appId'],
        'archive': opts['archive'],
        'archivePath': opts['archivePath'],
        'archiveSystem': opts['archiveSystem'],
        'batchQueue': opts['batchQueue'],
        'executionSystem': opts['executionSystem'],
        'id': opts['id'],
        'inputs': opts['inputs'],
        'localId': opts['localId'],
        'maxRuntime': opts['maxRuntime'],
        'memoryPerNode': opts['memoryPerNode'],
        'name': opts['name'],
        'nodeCount': opts['nodeCount'],
        'outputPath': opts['outputPath'],
        'parameters': opts['parameters'],
        'processorsPerNode': opts['processorsPerNode'],
        'retries': opts['retries'],
        'startTime': opts['startTime'],
        'status': opts['status'],
        'submitTime': opts['submitTime'],
        'visible': opts['visible'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Job];

      return this.apiClient.callApi(
        '/jobs/v2/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of jobs the authenticated user had submitted.
     * @param {Object} opts Optional parameters
     * @param {String} opts.appId The id of the app run by the job.
     * @param {String} opts.archive Boolean flag stating whether the job output was archived. (Acceptable values are: \&quot;true\&quot;, \&quot;false\&quot;) (default to true)
     * @param {String} opts.archivePath Path on the archive system where the job output was archived if the archive flag was true.
     * @param {String} opts.archiveSystem The id of the system where the job output was archived if the archive flag was true.
     * @param {String} opts.batchQueue The system queue in which the job ran.
     * @param {String} opts.executionSystem The execution system where the job ran.
     * @param {String} opts.id The id of the job.
     * @param {String} opts.inputs The job inputs. Note, this is a partial text search.
     * @param {String} opts.localId The local job id of the job on the execution system.
     * @param {String} opts.maxRuntime The maximum run time of the job in HH:mm:ss format.
     * @param {String} opts.memoryPerNode The memory requested by the job specified in GB.
     * @param {String} opts.name The name of the job.
     * @param {Number} opts.nodeCount The number of nodes requested for the job.
     * @param {String} opts.outputPath The remote work directory path of the job.
     * @param {String} opts.parameters The job parameters. Note, this is a partial text search.
     * @param {Number} opts.processorsPerNode The number of processors per node requested by the job.
     * @param {Number} opts.retries The number of retry attempts made on this job.
     * @param {String} opts.startTime The date the job began running. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as &#39;yesterday&#39; or &#39;3 days ago&#39;.
     * @param {module:Model/String} opts.status The job status.
     * @param {String} opts.submitTime The date the job was submitted to the remote execution system to run. Results are rounded by day. You may specify using YYYY-MM-DD format or free form timeframes such as &#39;yesterday&#39; or &#39;3 days ago&#39;.
     * @param {String} opts.visible Boolean flag indicating whether or not to show deleted jobs. Defaults to false. (Acceptable values are: \&quot;true\&quot;, \&quot;false\&quot;) (default to true)
     * @param {Number} opts.limit Boolean flag indicating whether or not to show deleted jobs. Defaults to false.
     * @param {Number} opts.offset Boolean flag indicating whether or not to show deleted jobs. Defaults to false.
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Job>}
     */
    this.listJobs = function(opts) {
      return this.listJobsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Resubmits the job with the given job id as a new job with a unique id.
     * @param {String} jobId The id of the job to resubmit
     * @param {module:Model/JobResubmitAction} body The resubmit action request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Job} and HTTP response
     */
    this.resubmitJobWithHttpInfo = function(jobId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling resubmitJob");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling resubmitJob");
      }


      var pathParams = {
        'jobId': jobId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Job;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Resubmits the job with the given job id as a new job with a unique id.
     * @param {String} jobId The id of the job to resubmit
     * @param {module:Model/JobResubmitAction} body The resubmit action request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Job}
     */
    this.resubmitJob = function(jobId, body, opts) {
      return this.resubmitJobWithHttpInfo(jobId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Submit a new job request.
     * @param {module:Model/JobRequest} body The JSON description of the job to submit. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Job} and HTTP response
     */
    this.submitJobWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling submitJob");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Job;

      return this.apiClient.callApi(
        '/jobs/v2/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Submit a new job request.
     * @param {module:Model/JobRequest} body The JSON description of the job to submit. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Job}
     */
    this.submitJob = function(body, opts) {
      return this.submitJobWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user permission for the given job and username
     * @param {String} jobId The id of the job for which the permissions will be updated
     * @param {String} username The user for whom the permission will be udpated
     * @param {module:Model/Permission} body The permission to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.updateJobPermissionWithHttpInfo = function(jobId, username, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling updateJobPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateJobPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateJobPermission");
      }


      var pathParams = {
        'jobId': jobId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/jobs/v2/{jobId}/pems/{username}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user permission for the given job and username
     * @param {String} jobId The id of the job for which the permissions will be updated
     * @param {String} username The user for whom the permission will be udpated
     * @param {module:Model/Permission} body The permission to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.updateJobPermission = function(jobId, username, body, opts) {
      return this.updateJobPermissionWithHttpInfo(jobId, username, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
