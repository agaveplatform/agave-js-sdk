/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/MonitoringTaskCheck', 'Model/MonitoringTaskDetails', 'Model/MonitoringTaskSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/MonitoringTaskCheck'), require('../Model/MonitoringTaskDetails'), require('../Model/MonitoringTaskSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.MonitorsApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.MonitoringTaskCheck, root.AgaveJsSdk.MonitoringTaskDetails, root.AgaveJsSdk.MonitoringTaskSummary);
  }
}(this, function(ApiClient, MonitoringTaskCheck, MonitoringTaskDetails, MonitoringTaskSummary) {
  'use strict';

  /**
   * Monitors service.
   * @module API/MonitorsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new MonitorsApi. 
   * @alias module:API/MonitorsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a new monitoring task
     * @param {module:Model/MonitoringTaskSummary} body The description of the monitoring task to run
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MonitoringTaskDetails} and HTTP response
     */
    this.addMonitoringTasksWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMonitoringTasks");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MonitoringTaskDetails;

      return this.apiClient.callApi(
        '/monitors/v2/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new monitoring task
     * @param {module:Model/MonitoringTaskSummary} body The description of the monitoring task to run
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MonitoringTaskDetails}
     */
    this.addMonitoringTasks = function(body, opts) {
      return this.addMonitoringTasksWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a monitor.
     * @param {String} monitorId The id of the monitor to delete
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteMonitoringTaskWithHttpInfo = function(monitorId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'monitorId' is set
      if (monitorId === undefined || monitorId === null) {
        throw new Error("Missing the required parameter 'monitorId' when calling deleteMonitoringTask");
      }


      var pathParams = {
        'monitorId': monitorId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/monitors/v2/{monitorId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a monitor.
     * @param {String} monitorId The id of the monitor to delete
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteMonitoringTask = function(monitorId, opts) {
      return this.deleteMonitoringTaskWithHttpInfo(monitorId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Forces a monitor check to run.
     * @param {String} monitorId The id of the monitor
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MonitoringTaskDetails} and HTTP response
     */
    this.forceMonitoringTaskCheckWithHttpInfo = function(monitorId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'monitorId' is set
      if (monitorId === undefined || monitorId === null) {
        throw new Error("Missing the required parameter 'monitorId' when calling forceMonitoringTaskCheck");
      }


      var pathParams = {
        'monitorId': monitorId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MonitoringTaskDetails;

      return this.apiClient.callApi(
        '/monitors/v2/{monitorId}/checks', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Forces a monitor check to run.
     * @param {String} monitorId The id of the monitor
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MonitoringTaskDetails}
     */
    this.forceMonitoringTaskCheck = function(monitorId, opts) {
      return this.forceMonitoringTaskCheckWithHttpInfo(monitorId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a specific monitor.
     * @param {String} monitorId The id of the monitor
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MonitoringTaskDetails} and HTTP response
     */
    this.getMonitoringTaskWithHttpInfo = function(monitorId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'monitorId' is set
      if (monitorId === undefined || monitorId === null) {
        throw new Error("Missing the required parameter 'monitorId' when calling getMonitoringTask");
      }


      var pathParams = {
        'monitorId': monitorId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MonitoringTaskDetails;

      return this.apiClient.callApi(
        '/monitors/v2/{monitorId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a specific monitor.
     * @param {String} monitorId The id of the monitor
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MonitoringTaskDetails}
     */
    this.getMonitoringTask = function(monitorId, opts) {
      return this.getMonitoringTaskWithHttpInfo(monitorId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve a specific monitor check
     * @param {String} monitorId The id of the monitor
     * @param {String} checkId The id of the monitor check
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MonitoringTaskCheck} and HTTP response
     */
    this.getMonitoringTaskCheckWithHttpInfo = function(monitorId, checkId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'monitorId' is set
      if (monitorId === undefined || monitorId === null) {
        throw new Error("Missing the required parameter 'monitorId' when calling getMonitoringTaskCheck");
      }

      // verify the required parameter 'checkId' is set
      if (checkId === undefined || checkId === null) {
        throw new Error("Missing the required parameter 'checkId' when calling getMonitoringTaskCheck");
      }


      var pathParams = {
        'monitorId': monitorId,
        'checkId': checkId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MonitoringTaskCheck;

      return this.apiClient.callApi(
        '/monitors/v2/{monitorId}/checks/{checkId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve a specific monitor check
     * @param {String} monitorId The id of the monitor
     * @param {String} checkId The id of the monitor check
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MonitoringTaskCheck}
     */
    this.getMonitoringTaskCheck = function(monitorId, checkId, opts) {
      return this.getMonitoringTaskCheckWithHttpInfo(monitorId, checkId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve checks for a specific monitor
     * @param {String} monitorId The id of the monitor
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate A timestamp indicating the earliest time of the first monitor check in ISO 8601 format
     * @param {String} opts.endDate A timestamp indicating the latest time of the first monitor check in ISO 8601 format
     * @param {module:Model/String} opts.result A timestamp indicating the latest time of the first monitor check in ISO 8601 format
     * @param {Number} opts.limit The max number of results. (default to 250)
     * @param {Number} opts.offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/MonitoringTaskCheck>} and HTTP response
     */
    this.listMonitoringTaskChecksWithHttpInfo = function(monitorId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'monitorId' is set
      if (monitorId === undefined || monitorId === null) {
        throw new Error("Missing the required parameter 'monitorId' when calling listMonitoringTaskChecks");
      }


      var pathParams = {
        'monitorId': monitorId
      };
      var queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'result': opts['result'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MonitoringTaskCheck];

      return this.apiClient.callApi(
        '/monitors/v2/{monitorId}/checks', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve checks for a specific monitor
     * @param {String} monitorId The id of the monitor
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate A timestamp indicating the earliest time of the first monitor check in ISO 8601 format
     * @param {String} opts.endDate A timestamp indicating the latest time of the first monitor check in ISO 8601 format
     * @param {module:Model/String} opts.result A timestamp indicating the latest time of the first monitor check in ISO 8601 format
     * @param {Number} opts.limit The max number of results. (default to 250)
     * @param {Number} opts.offset The number of records to when returning the results. When paginating results, the page number &#x3D; ceil(offset/limit) (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/MonitoringTaskCheck>}
     */
    this.listMonitoringTaskChecks = function(monitorId, opts) {
      return this.listMonitoringTaskChecksWithHttpInfo(monitorId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Monitor for a specific resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.target The target system to search for.
     * @param {String} opts.active Filter by monitors that are active or inactive. (default to true)
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/MonitoringTaskSummary>} and HTTP response
     */
    this.listMonitoringTasksWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'target': opts['target'],
        'active': opts['active'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MonitoringTaskSummary];

      return this.apiClient.callApi(
        '/monitors/v2/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Monitor for a specific resource.
     * @param {Object} opts Optional parameters
     * @param {String} opts.target The target system to search for.
     * @param {String} opts.active Filter by monitors that are active or inactive. (default to true)
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/MonitoringTaskSummary>}
     */
    this.listMonitoringTasks = function(opts) {
      return this.listMonitoringTasksWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Updates an existing monitor.
     * @param {module:Model/MonitoringTaskSummary} body The description of the app to add or update. This can be either a file upload or json posted to the request body.
     * @param {String} monitorId The id of the monitor to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MonitoringTaskDetails} and HTTP response
     */
    this.updateMonitoringTaskWithHttpInfo = function(body, monitorId, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMonitoringTask");
      }

      // verify the required parameter 'monitorId' is set
      if (monitorId === undefined || monitorId === null) {
        throw new Error("Missing the required parameter 'monitorId' when calling updateMonitoringTask");
      }


      var pathParams = {
        'monitorId': monitorId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MonitoringTaskDetails;

      return this.apiClient.callApi(
        '/monitors/v2/{monitorId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Updates an existing monitor.
     * @param {module:Model/MonitoringTaskSummary} body The description of the app to add or update. This can be either a file upload or json posted to the request body.
     * @param {String} monitorId The id of the monitor to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MonitoringTaskDetails}
     */
    this.updateMonitoringTask = function(body, monitorId, opts) {
      return this.updateMonitoringTaskWithHttpInfo(body, monitorId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
