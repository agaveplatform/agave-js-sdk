/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ExecutionSystem', 'Model/MultipleSystemRoleResponse', 'Model/StorageSystem', 'Model/System', 'Model/SystemAction', 'Model/SystemAuthConfig', 'Model/SystemCredential', 'Model/SystemCredentialsResponse', 'Model/SystemRequest', 'Model/SystemRole', 'Model/SystemRoleRequest', 'Model/SystemSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ExecutionSystem'), require('../Model/MultipleSystemRoleResponse'), require('../Model/StorageSystem'), require('../Model/System'), require('../Model/SystemAction'), require('../Model/SystemAuthConfig'), require('../Model/SystemCredential'), require('../Model/SystemCredentialsResponse'), require('../Model/SystemRequest'), require('../Model/SystemRole'), require('../Model/SystemRoleRequest'), require('../Model/SystemSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.SystemsApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.ExecutionSystem, root.AgaveJsSdk.MultipleSystemRoleResponse, root.AgaveJsSdk.StorageSystem, root.AgaveJsSdk.System, root.AgaveJsSdk.SystemAction, root.AgaveJsSdk.SystemAuthConfig, root.AgaveJsSdk.SystemCredential, root.AgaveJsSdk.SystemCredentialsResponse, root.AgaveJsSdk.SystemRequest, root.AgaveJsSdk.SystemRole, root.AgaveJsSdk.SystemRoleRequest, root.AgaveJsSdk.SystemSummary);
  }
}(this, function(ApiClient, ExecutionSystem, MultipleSystemRoleResponse, StorageSystem, System, SystemAction, SystemAuthConfig, SystemCredential, SystemCredentialsResponse, SystemRequest, SystemRole, SystemRoleRequest, SystemSummary) {
  'use strict';

  /**
   * Systems service.
   * @module API/SystemsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new SystemsApi. 
   * @alias module:API/SystemsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Add a new execution system
     * @param {module:Model/SystemRequest} body The description of the system to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/ExecutionSystem} and HTTP response
     */
    this.addExecutionSystemWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addExecutionSystem");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ExecutionSystem;

      return this.apiClient.callApi(
        '/systems/v2/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new execution system
     * @param {module:Model/SystemRequest} body The description of the system to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/ExecutionSystem}
     */
    this.addExecutionSystem = function(body, opts) {
      return this.addExecutionSystemWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add  a storage system
     * @param {module:Model/SystemRequest} body Description of a storage system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/StorageSystem} and HTTP response
     */
    this.addStorageSystemWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addStorageSystem");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = StorageSystem;

      return this.apiClient.callApi(
        '/systems/v2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add  a storage system
     * @param {module:Model/SystemRequest} body Description of a storage system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/StorageSystem}
     */
    this.addStorageSystem = function(body, opts) {
      return this.addStorageSystemWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add an internal user&#39;s credential on a system. This applies both to storage and, if applicable, login credentials.
     * @param {String} systemId The id of the system.
     * @param {module:Model/SystemCredential} body The description of the internal user credential to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/SystemCredential>} and HTTP response
     */
    this.addSystemCredentialWithHttpInfo = function(systemId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling addSystemCredential");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addSystemCredential");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SystemCredential];

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add an internal user&#39;s credential on a system. This applies both to storage and, if applicable, login credentials.
     * @param {String} systemId The id of the system.
     * @param {module:Model/SystemCredential} body The description of the internal user credential to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/SystemCredential>}
     */
    this.addSystemCredential = function(systemId, body, opts) {
      return this.addSystemCredentialWithHttpInfo(systemId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Adds a role on the system for the given user
     * @param {String} systemId The id of the system on which to grant the role
     * @param {module:Model/SystemRoleRequest} body The new role to grant
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemRole} and HTTP response
     */
    this.addSystemRoleWithHttpInfo = function(systemId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling addSystemRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addSystemRole");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemRole;

      return this.apiClient.callApi(
        '/systems/{systemId}/roles', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Adds a role on the system for the given user
     * @param {String} systemId The id of the system on which to grant the role
     * @param {module:Model/SystemRoleRequest} body The new role to grant
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemRole}
     */
    this.addSystemRole = function(systemId, body, opts) {
      return this.addSystemRoleWithHttpInfo(systemId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all credentials registered to a system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearSystemAuthCredentialsWithHttpInfo = function(systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling clearSystemAuthCredentials");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all credentials registered to a system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearSystemAuthCredentials = function(systemId, opts) {
      return this.clearSystemAuthCredentialsWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all internal user credentials registered to a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearSystemAuthCredentialsForInternalUserWithHttpInfo = function(systemId, internalUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling clearSystemAuthCredentialsForInternalUser");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling clearSystemAuthCredentialsForInternalUser");
      }


      var pathParams = {
        'systemId': systemId,
        'internalUsername': internalUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials/{internalUsername}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all internal user credentials registered to a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearSystemAuthCredentialsForInternalUser = function(systemId, internalUsername, opts) {
      return this.clearSystemAuthCredentialsForInternalUserWithHttpInfo(systemId, internalUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all roles on a system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearSystemRolesWithHttpInfo = function(systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling clearSystemRoles");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/roles', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all roles on a system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearSystemRoles = function(systemId, opts) {
      return this.clearSystemRolesWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a system.
     * @param {String} systemId The unique id of the system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSystemWithHttpInfo = function(systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteSystem");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete a system.
     * @param {String} systemId The unique id of the system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSystem = function(systemId, opts) {
      return this.deleteSystemWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes the internal user credentials for the given credential type on a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/String} credentialType The configuration type to which to apply this credential.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSystemAuthCredentialForInternalUserWithHttpInfo = function(systemId, internalUsername, credentialType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteSystemAuthCredentialForInternalUser");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling deleteSystemAuthCredentialForInternalUser");
      }

      // verify the required parameter 'credentialType' is set
      if (credentialType === undefined || credentialType === null) {
        throw new Error("Missing the required parameter 'credentialType' when calling deleteSystemAuthCredentialForInternalUser");
      }


      var pathParams = {
        'systemId': systemId,
        'internalUsername': internalUsername,
        'credentialType': credentialType
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials/{internalUsername}/{credentialType}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes the internal user credentials for the given credential type on a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/String} credentialType The configuration type to which to apply this credential.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSystemAuthCredentialForInternalUser = function(systemId, internalUsername, credentialType, opts) {
      return this.deleteSystemAuthCredentialForInternalUserWithHttpInfo(systemId, internalUsername, credentialType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all roles for a user on a system.
     * @param {String} systemId The id of the system.
     * @param {String} username The username of the api user associated with the role
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSystemRoleWithHttpInfo = function(systemId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteSystemRole");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteSystemRole");
      }


      var pathParams = {
        'systemId': systemId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/roles/{username}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all roles for a user on a system.
     * @param {String} systemId The id of the system.
     * @param {String} username The username of the api user associated with the role
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSystemRole = function(systemId, username, opts) {
      return this.deleteSystemRoleWithHttpInfo(systemId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the internal user credential of the given type on the system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/String} credentialType The configuration type to which to apply this credential.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemCredential} and HTTP response
     */
    this.getSystemCredentialWithHttpInfo = function(systemId, internalUsername, credentialType, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemCredential");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling getSystemCredential");
      }

      // verify the required parameter 'credentialType' is set
      if (credentialType === undefined || credentialType === null) {
        throw new Error("Missing the required parameter 'credentialType' when calling getSystemCredential");
      }


      var pathParams = {
        'systemId': systemId,
        'internalUsername': internalUsername,
        'credentialType': credentialType
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemCredential;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials/{internalUsername}/{credentialType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the internal user credential of the given type on the system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/String} credentialType The configuration type to which to apply this credential.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemCredential}
     */
    this.getSystemCredential = function(systemId, internalUsername, credentialType, opts) {
      return this.getSystemCredentialWithHttpInfo(systemId, internalUsername, credentialType, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find information about an individual system.
     * @param {String} systemId The unique id of the system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/System} and HTTP response
     */
    this.getSystemDetailsWithHttpInfo = function(systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemDetails");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = System;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find information about an individual system.
     * @param {String} systemId The unique id of the system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/System}
     */
    this.getSystemDetails = function(systemId, opts) {
      return this.getSystemDetailsWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific user role on this system.
     * @param {String} systemId The id of the system.
     * @param {String} username The username of the user about whose role you are inquiring.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemRole} and HTTP response
     */
    this.getSystemRoleWithHttpInfo = function(systemId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling getSystemRole");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getSystemRole");
      }


      var pathParams = {
        'systemId': systemId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemRole;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/roles/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific user role on this system.
     * @param {String} systemId The id of the system.
     * @param {String} username The username of the user about whose role you are inquiring.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemRole}
     */
    this.getSystemRole = function(systemId, username, opts) {
      return this.getSystemRoleWithHttpInfo(systemId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Perform a management action on the system.
     * @param {String} systemId The id of the system receiving the action
     * @param {module:Model/SystemAction} body The action to invoke
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.invokeSystemActionWithHttpInfo = function(systemId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling invokeSystemAction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeSystemAction");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform a management action on the system.
     * @param {String} systemId The id of the system receiving the action
     * @param {module:Model/SystemAction} body The action to invoke
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.invokeSystemAction = function(systemId, body, opts) {
      return this.invokeSystemActionWithHttpInfo(systemId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all internal users and their credentials on this system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemCredentialsResponse} and HTTP response
     */
    this.listCredentialsForInternalUserWithHttpInfo = function(systemId, internalUsername) {
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling listCredentialsForInternalUser");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling listCredentialsForInternalUser");
      }


      var pathParams = {
        'systemId': systemId,
        'internalUsername': internalUsername
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemCredentialsResponse;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials/{internalUsername}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of all internal users and their credentials on this system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemCredentialsResponse}
     */
    this.listCredentialsForInternalUser = function(systemId, internalUsername) {
      return this.listCredentialsForInternalUserWithHttpInfo(systemId, internalUsername)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all internal user credentials on this system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/SystemCredential>} and HTTP response
     */
    this.listSystemCredentialsWithHttpInfo = function(systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling listSystemCredentials");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SystemCredential];

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of all internal user credentials on this system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/SystemCredential>}
     */
    this.listSystemCredentials = function(systemId, opts) {
      return this.listSystemCredentialsWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a list of all users and their roles on this system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MultipleSystemRoleResponse} and HTTP response
     */
    this.listSystemRolesWithHttpInfo = function(systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling listSystemRoles");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultipleSystemRoleResponse;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/roles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a list of all users and their roles on this system.
     * @param {String} systemId The id of the system.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MultipleSystemRoleResponse}
     */
    this.listSystemRoles = function(systemId, opts) {
      return this.listSystemRolesWithHttpInfo(systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Show all systems available to the user.
     * @param {Number} offset The number of results skipped in the result set returned from this query
     * @param {Object} opts Optional parameters
     * @param {module:Model/String} opts.type The type of system to return
     * @param {Boolean} opts._default If true, only default systems be returned
     * @param {Boolean} opts._public If true, only public systems will be returned. If false, no public systems will be returned. If null, both public and private systems will be returned.
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/SystemSummary>} and HTTP response
     */
    this.listSystemsWithHttpInfo = function(offset, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'offset' is set
      if (offset === undefined || offset === null) {
        throw new Error("Missing the required parameter 'offset' when calling listSystems");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
        'default': opts['_default'],
        'public': opts['_public'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': offset,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SystemSummary];

      return this.apiClient.callApi(
        '/systems/v2/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Show all systems available to the user.
     * @param {Number} offset The number of results skipped in the result set returned from this query
     * @param {Object} opts Optional parameters
     * @param {module:Model/String} opts.type The type of system to return
     * @param {Boolean} opts._default If true, only default systems be returned
     * @param {Boolean} opts._public If true, only public systems will be returned. If false, no public systems will be returned. If null, both public and private systems will be returned.
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/SystemSummary>}
     */
    this.listSystems = function(offset, opts) {
      return this.listSystemsWithHttpInfo(offset, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a system description
     * @param {String} systemId The unique id of the system
     * @param {module:Model/SystemRequest} body The description of the system to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/System} and HTTP response
     */
    this.updateSystemWithHttpInfo = function(systemId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSystem");
      }


      var pathParams = {
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = System;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a system description
     * @param {String} systemId The unique id of the system
     * @param {module:Model/SystemRequest} body The description of the system to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/System}
     */
    this.updateSystem = function(systemId, body, opts) {
      return this.updateSystemWithHttpInfo(systemId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an internal user credential on a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/SystemAuthConfig} body The description of the internal user credential to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemCredential} and HTTP response
     */
    this.updateSystemCredentialWithHttpInfo = function(systemId, internalUsername, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemCredential");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling updateSystemCredential");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSystemCredential");
      }


      var pathParams = {
        'systemId': systemId,
        'internalUsername': internalUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemCredential;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials/{internalUsername}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an internal user credential on a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/SystemAuthConfig} body The description of the internal user credential to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemCredential}
     */
    this.updateSystemCredential = function(systemId, internalUsername, body, opts) {
      return this.updateSystemCredentialWithHttpInfo(systemId, internalUsername, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or update a credential of the given type on a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/String} credentialType The configuration type to which to apply this credential.
     * @param {module:Model/SystemAuthConfig} body The description of the internal user credential to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemCredential} and HTTP response
     */
    this.updateSystemCredentialOfTypeWithHttpInfo = function(systemId, internalUsername, credentialType, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemCredentialOfType");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling updateSystemCredentialOfType");
      }

      // verify the required parameter 'credentialType' is set
      if (credentialType === undefined || credentialType === null) {
        throw new Error("Missing the required parameter 'credentialType' when calling updateSystemCredentialOfType");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSystemCredentialOfType");
      }


      var pathParams = {
        'systemId': systemId,
        'internalUsername': internalUsername,
        'credentialType': credentialType
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemCredential;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/credentials/{internalUsername}/{credentialType}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add or update a credential of the given type on a system.
     * @param {String} systemId The id of the system.
     * @param {String} internalUsername The username of a internal user on this system.
     * @param {module:Model/String} credentialType The configuration type to which to apply this credential.
     * @param {module:Model/SystemAuthConfig} body The description of the internal user credential to add or update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemCredential}
     */
    this.updateSystemCredentialOfType = function(systemId, internalUsername, credentialType, body, opts) {
      return this.updateSystemCredentialOfTypeWithHttpInfo(systemId, internalUsername, credentialType, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user role on a system.
     * @param {String} systemId The id of the system.
     * @param {String} username The username of the api user associated with the role
     * @param {module:Model/SystemRoleRequest} body The role to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SystemRole} and HTTP response
     */
    this.updateSystemRoleWithHttpInfo = function(systemId, username, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateSystemRole");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateSystemRole");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateSystemRole");
      }


      var pathParams = {
        'systemId': systemId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SystemRole;

      return this.apiClient.callApi(
        '/systems/v2/{systemId}/roles/{username}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user role on a system.
     * @param {String} systemId The id of the system.
     * @param {String} username The username of the api user associated with the role
     * @param {module:Model/SystemRoleRequest} body The role to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SystemRole}
     */
    this.updateSystemRole = function(systemId, username, body, opts) {
      return this.updateSystemRoleWithHttpInfo(systemId, username, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
