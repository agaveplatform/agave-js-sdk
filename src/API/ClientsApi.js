/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/ClientRequest', 'Model/ClientSubscriptionRequest', 'Model/EmptyClientResponse', 'Model/MultipleClientResponse', 'Model/MultipleSubscriptionResponse', 'Model/SingleClientResponse', 'Model/SingleSubscriptionResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/ClientRequest'), require('../Model/ClientSubscriptionRequest'), require('../Model/EmptyClientResponse'), require('../Model/MultipleClientResponse'), require('../Model/MultipleSubscriptionResponse'), require('../Model/SingleClientResponse'), require('../Model/SingleSubscriptionResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.ClientsApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.ClientRequest, root.AgaveJsSdk.ClientSubscriptionRequest, root.AgaveJsSdk.EmptyClientResponse, root.AgaveJsSdk.MultipleClientResponse, root.AgaveJsSdk.MultipleSubscriptionResponse, root.AgaveJsSdk.SingleClientResponse, root.AgaveJsSdk.SingleSubscriptionResponse);
  }
}(this, function(ApiClient, ClientRequest, ClientSubscriptionRequest, EmptyClientResponse, MultipleClientResponse, MultipleSubscriptionResponse, SingleClientResponse, SingleSubscriptionResponse) {
  'use strict';

  /**
   * Clients service.
   * @module API/ClientsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ClientsApi. 
   * @alias module:API/ClientsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create a new client
     * @param {module:Model/ClientRequest} body The api client to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SingleClientResponse} and HTTP response
     */
    this.addClientWithHttpInfo = function(body) {
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addClient");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleClientResponse;

      return this.apiClient.callApi(
        '/clients/v2/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create a new client
     * @param {module:Model/ClientRequest} body The api client to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SingleClientResponse}
     */
    this.addClient = function(body) {
      return this.addClientWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new API subscription to the given client
     * @param {String} clientName The name of the client to be subscribe to this api
     * @param {module:Model/ClientSubscriptionRequest} body The api client to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/SingleSubscriptionResponse} and HTTP response
     */
    this.addClientAPISubscriptionWithHttpInfo = function(clientName, body) {
      var postBody = body;

      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling addClientAPISubscription");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addClientAPISubscription");
      }


      var pathParams = {
        'clientName': clientName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SingleSubscriptionResponse;

      return this.apiClient.callApi(
        '/clients/v2/{clientName}/subscriptions', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new API subscription to the given client
     * @param {String} clientName The name of the client to be subscribe to this api
     * @param {module:Model/ClientSubscriptionRequest} body The api client to create
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/SingleSubscriptionResponse}
     */
    this.addClientAPISubscription = function(clientName, body) {
      return this.addClientAPISubscriptionWithHttpInfo(clientName, body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Unsubscribe the client from all APIs
     * @param {String} clientName The name of the client to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EmptyClientResponse} and HTTP response
     */
    this.clearClientAPISubscriptionsWithHttpInfo = function(clientName) {
      var postBody = null;

      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling clearClientAPISubscriptions");
      }


      var pathParams = {
        'clientName': clientName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmptyClientResponse;

      return this.apiClient.callApi(
        '/clients/v2/{clientName}/subscriptions', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Unsubscribe the client from all APIs
     * @param {String} clientName The name of the client to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EmptyClientResponse}
     */
    this.clearClientAPISubscriptions = function(clientName) {
      return this.clearClientAPISubscriptionsWithHttpInfo(clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Immediately deletes this client and renders the API keys useless.
     * @param {String} clientName The name of the client to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EmptyClientResponse} and HTTP response
     */
    this.deleteClientWithHttpInfo = function(clientName) {
      var postBody = null;

      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling deleteClient");
      }


      var pathParams = {
        'clientName': clientName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmptyClientResponse;

      return this.apiClient.callApi(
        '/clients/v2/{clientName}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Immediately deletes this client and renders the API keys useless.
     * @param {String} clientName The name of the client to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EmptyClientResponse}
     */
    this.deleteClient = function(clientName) {
      return this.deleteClientWithHttpInfo(clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Returns a detailed description of a named client.
     * @param {String} clientName The name of the client to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MultipleClientResponse} and HTTP response
     */
    this.getClientWithHttpInfo = function(clientName) {
      var postBody = null;

      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling getClient");
      }


      var pathParams = {
        'clientName': clientName
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultipleClientResponse;

      return this.apiClient.callApi(
        '/clients/v2/{clientName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns a detailed description of a named client.
     * @param {String} clientName The name of the client to be deleted
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MultipleClientResponse}
     */
    this.getClient = function(clientName) {
      return this.getClientWithHttpInfo(clientName)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Lists all APIs to which the client is subscribed
     * @param {String} clientName The name of the client to be deleted
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MultipleSubscriptionResponse} and HTTP response
     */
    this.listClientApiSubscriptionsWithHttpInfo = function(clientName, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'clientName' is set
      if (clientName === undefined || clientName === null) {
        throw new Error("Missing the required parameter 'clientName' when calling listClientApiSubscriptions");
      }


      var pathParams = {
        'clientName': clientName
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultipleSubscriptionResponse;

      return this.apiClient.callApi(
        '/clients/v2/{clientName}/subscriptions', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Lists all APIs to which the client is subscribed
     * @param {String} clientName The name of the client to be deleted
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MultipleSubscriptionResponse}
     */
    this.listClientApiSubscriptions = function(clientName, opts) {
      return this.listClientApiSubscriptionsWithHttpInfo(clientName, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List existing clients
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MultipleClientResponse} and HTTP response
     */
    this.listClientsWithHttpInfo = function() {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveBasic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MultipleClientResponse;

      return this.apiClient.callApi(
        '/clients/v2/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List existing clients
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MultipleClientResponse}
     */
    this.listClients = function() {
      return this.listClientsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
