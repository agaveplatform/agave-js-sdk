/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Permission', 'Model/Tag', 'Model/TagHistory', 'Model/TagResource', 'Model/TagSummary'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Permission'), require('../Model/Tag'), require('../Model/TagHistory'), require('../Model/TagResource'), require('../Model/TagSummary'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.TagApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.Permission, root.AgaveJsSdk.Tag, root.AgaveJsSdk.TagHistory, root.AgaveJsSdk.TagResource, root.AgaveJsSdk.TagSummary);
  }
}(this, function(ApiClient, Permission, Tag, TagHistory, TagResource, TagSummary) {
  'use strict';

  /**
   * Tag service.
   * @module API/TagApi
   * @version 0.1.0
   */

  /**
   * Constructs a new TagApi. 
   * @alias module:API/TagApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Creat a new tag
     * Creates a new tag
     * @param {module:Model/Tag} body JSON Tag object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Tag} and HTTP response
     */
    this.addTagWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addTag");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Tag;

      return this.apiClient.callApi(
        '/tags/v2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Creat a new tag
     * Creates a new tag
     * @param {module:Model/Tag} body JSON Tag object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Tag}
     */
    this.addTag = function(body, opts) {
      return this.addTagWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add resources to tag
     * Adds the list of resources to the given tag
     * @param {String} tagId Unique id of the tag
     * @param {module:Model/TagResource} body List of resource uuid to add
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Tag>} and HTTP response
     */
    this.addTagResourceWithHttpInfo = function(tagId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling addTagResource");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addTagResource");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Tag];

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/resources', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add resources to tag
     * Adds the list of resources to the given tag
     * @param {String} tagId Unique id of the tag
     * @param {module:Model/TagResource} body List of resource uuid to add
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Tag>}
     */
    this.addTagResource = function(tagId, body, opts) {
      return this.addTagResourceWithHttpInfo(tagId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear tag permissions
     * Removes all permissions save ownership from the given tag
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearTagPermissionsWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling clearTagPermissions");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/pems', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Clear tag permissions
     * Removes all permissions save ownership from the given tag
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearTagPermissions = function(tagId, opts) {
      return this.clearTagPermissionsWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Clear all tagged resources
     * Removes all resources from the given tag
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearTagResourcesWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling clearTagResources");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/resources', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Clear all tagged resources
     * Removes all resources from the given tag
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearTagResources = function(tagId, opts) {
      return this.clearTagResourcesWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete tag
     * Deletes the tag and all permissions
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteTagWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTag");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete tag
     * Deletes the tag and all permissions
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteTag = function(tagId, opts) {
      return this.deleteTagWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove user tag permission
     * Removes permissions for the given user on the given tag
     * @param {String} tagId Unique id of the tag
     * @param {String} username Username to revoke permission
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteTagPermissionForUserWithHttpInfo = function(tagId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling deleteTagPermissionForUser");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteTagPermissionForUser");
      }


      var pathParams = {
        'tagId': tagId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/pems/{username}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove user tag permission
     * Removes permissions for the given user on the given tag
     * @param {String} tagId Unique id of the tag
     * @param {String} username Username to revoke permission
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteTagPermissionForUser = function(tagId, username, opts) {
      return this.deleteTagPermissionForUserWithHttpInfo(tagId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Tag Details
     * Returns detailed information about the named tag
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Tag} and HTTP response
     */
    this.getTagDetailsWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagDetails");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Tag;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Tag Details
     * Returns detailed information about the named tag
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Tag}
     */
    this.getTagDetails = function(tagId, opts) {
      return this.getTagDetailsWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List tag permissions for a user
     * Returns the permission set on the given tag for a specific user.
     * @param {String} tagId Unique id of the tag
     * @param {String} username Valid username
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Permission>} and HTTP response
     */
    this.getTagPermissionForUserWithHttpInfo = function(tagId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTagPermissionForUser");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getTagPermissionForUser");
      }


      var pathParams = {
        'tagId': tagId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/pems/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List tag permissions for a user
     * Returns the permission set on the given tag for a specific user.
     * @param {String} tagId Unique id of the tag
     * @param {String} username Valid username
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Permission>}
     */
    this.getTagPermissionForUser = function(tagId, username, opts) {
      return this.getTagPermissionForUserWithHttpInfo(tagId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get tagged item details
     * Returns a list of items with the given tag.
     * @param {String} tagId Unique id of the tag
     * @param {String} uuid Unique id of a resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TagResource} and HTTP response
     */
    this.getTaggedResourceWithHttpInfo = function(tagId, uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling getTaggedResource");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getTaggedResource");
      }


      var pathParams = {
        'tagId': tagId,
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagResource;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/resources/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get tagged item details
     * Returns a list of items with the given tag.
     * @param {String} tagId Unique id of the tag
     * @param {String} uuid Unique id of a resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TagResource}
     */
    this.getTaggedResource = function(tagId, uuid, opts) {
      return this.getTaggedResourceWithHttpInfo(tagId, uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Tag history
     * Returns a list of items with the given tag.
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/TagHistory>} and HTTP response
     */
    this.listTagHistoryWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling listTagHistory");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TagHistory];

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Tag history
     * Returns a list of items with the given tag.
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/TagHistory>}
     */
    this.listTagHistory = function(tagId, opts) {
      return this.listTagHistoryWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List permissionss set for a given tag id
     * Returns a list of permission objects set on this Tag
     * @param {String} tagId Unique id of the system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Permission>} and HTTP response
     */
    this.listTagPermissionsWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling listTagPermissions");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/pems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List permissionss set for a given tag id
     * Returns a list of permission objects set on this Tag
     * @param {String} tagId Unique id of the system
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Permission>}
     */
    this.listTagPermissions = function(tagId, opts) {
      return this.listTagPermissionsWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Tagged items
     * Returns a list of items with the given tag.
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/TagResource>} and HTTP response
     */
    this.listTagResourcesWithHttpInfo = function(tagId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling listTagResources");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TagResource];

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/resources', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Tagged items
     * Returns a list of items with the given tag.
     * @param {String} tagId Unique id of the tag
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/TagResource>}
     */
    this.listTagResources = function(tagId, opts) {
      return this.listTagResourcesWithHttpInfo(tagId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Available tags
     * The Tags endpoint returns summary information about the available list of tags right now.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the tag for which to search
     * @param {String} opts.resourceType Search for tags associated with one or resources of named type
     * @param {String} opts.resourceId Id of tagged resource
     * @param {String} opts.lastModified Date at which tag was modified in ISO8601 format
     * @param {String} opts.created Date at which tag was created in ISO8601 format
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/TagSummary>} and HTTP response
     */
    this.listTagsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'name': opts['name'],
        'resourceType': opts['resourceType'],
        'resourceId': opts['resourceId'],
        'lastModified': opts['lastModified'],
        'created': opts['created'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [TagSummary];

      return this.apiClient.callApi(
        '/tags/v2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Available tags
     * The Tags endpoint returns summary information about the available list of tags right now.
     * @param {Object} opts Optional parameters
     * @param {String} opts.name Name of the tag for which to search
     * @param {String} opts.resourceType Search for tags associated with one or resources of named type
     * @param {String} opts.resourceId Id of tagged resource
     * @param {String} opts.lastModified Date at which tag was modified in ISO8601 format
     * @param {String} opts.created Date at which tag was created in ISO8601 format
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @param {Number} opts.limit Maximum number of responses. Default 100 (default to 100)
     * @param {Number} opts.offset Number of results to skip by default (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/TagSummary>}
     */
    this.listTags = function(opts) {
      return this.listTagsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove resource from tag
     * Removes the given uuid from this tag
     * @param {String} tagId Unique id of the tag
     * @param {String} uuid UUID of the resource to delete
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.removeTagResourceWithHttpInfo = function(tagId, uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling removeTagResource");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling removeTagResource");
      }


      var pathParams = {
        'tagId': tagId,
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/resources/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove resource from tag
     * Removes the given uuid from this tag
     * @param {String} tagId Unique id of the tag
     * @param {String} uuid UUID of the resource to delete
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.removeTagResource = function(tagId, uuid, opts) {
      return this.removeTagResourceWithHttpInfo(tagId, uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update tag
     * Updates the given tag with the updated information
     * @param {String} tagId Unique id of the tag
     * @param {module:Model/Tag} body JSON Tag object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Tag} and HTTP response
     */
    this.updateTagWithHttpInfo = function(tagId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateTag");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTag");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Tag;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update tag
     * Updates the given tag with the updated information
     * @param {String} tagId Unique id of the tag
     * @param {module:Model/Tag} body JSON Tag object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Tag}
     */
    this.updateTag = function(tagId, body, opts) {
      return this.updateTagWithHttpInfo(tagId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Grant permission
     * Adds a permission for a given user to a given tag
     * @param {String} tagId Unique id of the tag
     * @param {module:Model/Permission} body Unique id of a resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.updateTagPermissionWithHttpInfo = function(tagId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateTagPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTagPermission");
      }


      var pathParams = {
        'tagId': tagId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/pems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Grant permission
     * Adds a permission for a given user to a given tag
     * @param {String} tagId Unique id of the tag
     * @param {module:Model/Permission} body Unique id of a resource
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.updateTagPermission = function(tagId, body, opts) {
      return this.updateTagPermissionWithHttpInfo(tagId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update user permission on tag
     * Resets the user permission on the given tag
     * @param {String} tagId Unique id of the tag
     * @param {String} username Valid username
     * @param {module:Model/Permission} body Valid permission value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.updateTagPermissionForUserWithHttpInfo = function(tagId, username, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateTagPermissionForUser");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateTagPermissionForUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTagPermissionForUser");
      }


      var pathParams = {
        'tagId': tagId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json', 'multipart/form-data'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/pems/{username}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update user permission on tag
     * Resets the user permission on the given tag
     * @param {String} tagId Unique id of the tag
     * @param {String} username Valid username
     * @param {module:Model/Permission} body Valid permission value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.updateTagPermissionForUser = function(tagId, username, body, opts) {
      return this.updateTagPermissionForUserWithHttpInfo(tagId, username, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add resource to tag
     * Adds the resource with the given uuid to the given tag
     * @param {String} tagId Unique id of the tag
     * @param {String} uuid Unique id of a resource
     * @param {Object} opts Optional parameters
     * @param {module:Model/TagResource} opts.body empty body
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/TagResource} and HTTP response
     */
    this.updateTagResourceWithHttpInfo = function(tagId, uuid, opts) {
      opts = opts || {};
      var postBody = opts['body'];

      // verify the required parameter 'tagId' is set
      if (tagId === undefined || tagId === null) {
        throw new Error("Missing the required parameter 'tagId' when calling updateTagResource");
      }

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateTagResource");
      }


      var pathParams = {
        'tagId': tagId,
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TagResource;

      return this.apiClient.callApi(
        '/tags/v2/{tagId}/resources/{uuid}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add resource to tag
     * Adds the resource with the given uuid to the given tag
     * @param {String} tagId Unique id of the tag
     * @param {String} uuid Unique id of a resource
     * @param {Object} opts Optional parameters
     * @param {module:Model/TagResource} opts.body empty body
     * @param {Boolean} opts.naked If true return only the payload, not the standard response wrapper (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/TagResource}
     */
    this.updateTagResource = function(tagId, uuid, opts) {
      return this.updateTagResourceWithHttpInfo(tagId, uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
