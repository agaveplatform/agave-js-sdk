/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/EmptyClientResponse', 'Model/InternalUser', 'Model/Profile', 'Model/ProfileRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/EmptyClientResponse'), require('../Model/InternalUser'), require('../Model/Profile'), require('../Model/ProfileRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.ProfilesApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.EmptyClientResponse, root.AgaveJsSdk.InternalUser, root.AgaveJsSdk.Profile, root.AgaveJsSdk.ProfileRequest);
  }
}(this, function(ApiClient, EmptyClientResponse, InternalUser, Profile, ProfileRequest) {
  'use strict';

  /**
   * Profiles service.
   * @module API/ProfilesApi
   * @version 0.1.0
   */

  /**
   * Constructs a new ProfilesApi. 
   * @alias module:API/ProfilesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Create or update an internal user.
     * @param {String} apiUsername The username of a valid api user
     * @param {module:Model/ProfileRequest} body The internal user to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/InternalUser} and HTTP response
     */
    this.addInternalUserWithHttpInfo = function(apiUsername, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling addInternalUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addInternalUser");
      }


      var pathParams = {
        'apiUsername': apiUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InternalUser;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}/users', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create or update an internal user.
     * @param {String} apiUsername The username of a valid api user
     * @param {module:Model/ProfileRequest} body The internal user to create.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/InternalUser}
     */
    this.addInternalUser = function(apiUsername, body, opts) {
      return this.addInternalUserWithHttpInfo(apiUsername, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new user profile
     * @param {module:Model/Profile} body The user profile to add
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Profile} and HTTP response
     */
    this.addProfileWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProfile");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Profile;

      return this.apiClient.callApi(
        '/profiles/v2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new user profile
     * @param {module:Model/Profile} body The user profile to add
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Profile}
     */
    this.addProfile = function(body, opts) {
      return this.addProfileWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all internal users created by the authenticated user.
     * @param {String} apiUsername The username of a valid api user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearInternalUsersWithHttpInfo = function(apiUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling clearInternalUsers");
      }


      var pathParams = {
        'apiUsername': apiUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}/users', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete all internal users created by the authenticated user.
     * @param {String} apiUsername The username of a valid api user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearInternalUsers = function(apiUsername, opts) {
      return this.clearInternalUsersWithHttpInfo(apiUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete all internal users created by the authenticated user.
     * @param {String} apiUsername The username of a valid api user
     * @param {String} internalUsername The username of a valid internal user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/InternalUser} and HTTP response
     */
    this.deleteInternalUserWithHttpInfo = function(apiUsername, internalUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling deleteInternalUser");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling deleteInternalUser");
      }


      var pathParams = {
        'apiUsername': apiUsername,
        'internalUsername': internalUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InternalUser;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}/users/{internalUsername}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delete all internal users created by the authenticated user.
     * @param {String} apiUsername The username of a valid api user
     * @param {String} internalUsername The username of a valid internal user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/InternalUser}
     */
    this.deleteInternalUser = function(apiUsername, internalUsername, opts) {
      return this.deleteInternalUserWithHttpInfo(apiUsername, internalUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delte a user profile by name
     * @param {String} apiUsername The username of the profile to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/EmptyClientResponse} and HTTP response
     */
    this.deleteProfileWithHttpInfo = function(apiUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling deleteProfile");
      }


      var pathParams = {
        'apiUsername': apiUsername
      };
      var queryParams = {
        'filter': opts['filter'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = EmptyClientResponse;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Delte a user profile by name
     * @param {String} apiUsername The username of the profile to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/EmptyClientResponse}
     */
    this.deleteProfile = function(apiUsername, opts) {
      return this.deleteProfileWithHttpInfo(apiUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Find api user profile by their api username
     * @param {String} apiUsername The username of a valid api user
     * @param {String} internalUsername The username of a valid internal user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/InternalUser} and HTTP response
     */
    this.getInternalUserWithHttpInfo = function(apiUsername, internalUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getInternalUser");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling getInternalUser");
      }


      var pathParams = {
        'apiUsername': apiUsername,
        'internalUsername': internalUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InternalUser;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}/users/{internalUsername}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Find api user profile by their api username
     * @param {String} apiUsername The username of a valid api user
     * @param {String} internalUsername The username of a valid internal user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/InternalUser}
     */
    this.getInternalUser = function(apiUsername, internalUsername, opts) {
      return this.getInternalUserWithHttpInfo(apiUsername, internalUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a user profile by name
     * @param {String} apiUsername The username of the profile to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Profile} and HTTP response
     */
    this.getProfileWithHttpInfo = function(apiUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling getProfile");
      }


      var pathParams = {
        'apiUsername': apiUsername
      };
      var queryParams = {
        'filter': opts['filter'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Profile;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a user profile by name
     * @param {String} apiUsername The username of the profile to update
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Profile}
     */
    this.getProfile = function(apiUsername, opts) {
      return this.getProfileWithHttpInfo(apiUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all internal users created by the authenticated user
     * @param {String} apiUsername The username of a valid api user
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of the internal user
     * @param {String} opts.name The full name of the internal user
     * @param {String} opts.email The email address of the internal user
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/InternalUser>} and HTTP response
     */
    this.listInternalUsersWithHttpInfo = function(apiUsername, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling listInternalUsers");
      }


      var pathParams = {
        'apiUsername': apiUsername
      };
      var queryParams = {
        'username': opts['username'],
        'name': opts['name'],
        'email': opts['email'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [InternalUser];

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}/users', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all internal users created by the authenticated user
     * @param {String} apiUsername The username of a valid api user
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username of the internal user
     * @param {String} opts.name The full name of the internal user
     * @param {String} opts.email The email address of the internal user
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/InternalUser>}
     */
    this.listInternalUsers = function(apiUsername, opts) {
      return this.listInternalUsersWithHttpInfo(apiUsername, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List user profiles
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username to search for
     * @param {String} opts.name The user full name
     * @param {String} opts.email The user email address
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Profile>} and HTTP response
     */
    this.listProfilesWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'username': opts['username'],
        'name': opts['name'],
        'email': opts['email'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Profile];

      return this.apiClient.callApi(
        '/profiles/v2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List user profiles
     * @param {Object} opts Optional parameters
     * @param {String} opts.username The username to search for
     * @param {String} opts.name The user full name
     * @param {String} opts.email The user email address
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Profile>}
     */
    this.listProfiles = function(opts) {
      return this.listProfilesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create or update the given internal user.
     * @param {String} apiUsername The username of a valid api user
     * @param {String} internalUsername The username of a valid internal user
     * @param {module:Model/ProfileRequest} body A JSON description of the internal user to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/InternalUser} and HTTP response
     */
    this.updateInternalUserWithHttpInfo = function(apiUsername, internalUsername, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling updateInternalUser");
      }

      // verify the required parameter 'internalUsername' is set
      if (internalUsername === undefined || internalUsername === null) {
        throw new Error("Missing the required parameter 'internalUsername' when calling updateInternalUser");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateInternalUser");
      }


      var pathParams = {
        'apiUsername': apiUsername,
        'internalUsername': internalUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InternalUser;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}/users/{internalUsername}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Create or update the given internal user.
     * @param {String} apiUsername The username of a valid api user
     * @param {String} internalUsername The username of a valid internal user
     * @param {module:Model/ProfileRequest} body A JSON description of the internal user to update
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/InternalUser}
     */
    this.updateInternalUser = function(apiUsername, internalUsername, body, opts) {
      return this.updateInternalUserWithHttpInfo(apiUsername, internalUsername, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing user profile
     * @param {String} apiUsername The username of the profile to update
     * @param {module:Model/ProfileRequest} body The updated profile
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Profile} and HTTP response
     */
    this.updateProfileWithHttpInfo = function(apiUsername, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'apiUsername' is set
      if (apiUsername === undefined || apiUsername === null) {
        throw new Error("Missing the required parameter 'apiUsername' when calling updateProfile");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProfile");
      }


      var pathParams = {
        'apiUsername': apiUsername
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Profile;

      return this.apiClient.callApi(
        '/profiles/v2/{apiUsername}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing user profile
     * @param {String} apiUsername The username of the profile to update
     * @param {module:Model/ProfileRequest} body The updated profile
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Profile}
     */
    this.updateProfile = function(apiUsername, body, opts) {
      return this.updateProfileWithHttpInfo(apiUsername, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
