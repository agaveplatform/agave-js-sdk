/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Metadata', 'Model/MetadataSchema', 'Model/Permission'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Metadata'), require('../Model/MetadataSchema'), require('../Model/Permission'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.MetaApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.Metadata, root.AgaveJsSdk.MetadataSchema, root.AgaveJsSdk.Permission);
  }
}(this, function(ApiClient, Metadata, MetadataSchema, Permission) {
  'use strict';

  /**
   * Meta service.
   * @module API/MetaApi
   * @version 0.1.0
   */

  /**
   * Constructs a new MetaApi. 
   * @alias module:API/MetaApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Update or Add new Metadata.
     * @param {module:Model/Metadata} body The metadata to add.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Metadata} and HTTP response
     */
    this.addMetadataWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMetadata");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metadata;

      return this.apiClient.callApi(
        '/meta/v2/data', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update or Add new Metadata.
     * @param {module:Model/Metadata} body The metadata to add.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Metadata}
     */
    this.addMetadata = function(body, opts) {
      return this.addMetadataWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a user permission for the given metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {module:Model/Permission} body The metadata permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.addMetadataPermissionWithHttpInfo = function(uuid, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling addMetadataPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMetadataPermission");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}/pems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a user permission for the given metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {module:Model/Permission} body The metadata permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.addMetadataPermission = function(uuid, body, opts) {
      return this.addMetadataPermissionWithHttpInfo(uuid, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a new Metadata Schema.
     * @param {module:Model/MetadataSchema} body A valid JSON Schema object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MetadataSchema} and HTTP response
     */
    this.addMetadataSchemaWithHttpInfo = function(body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMetadataSchema");
      }


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetadataSchema;

      return this.apiClient.callApi(
        '/meta/v2/schemas', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a new Metadata Schema.
     * @param {module:Model/MetadataSchema} body A valid JSON Schema object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetadataSchema}
     */
    this.addMetadataSchema = function(body, opts) {
      return this.addMetadataSchemaWithHttpInfo(body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add a user permission for the given schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {module:Model/Permission} body The schema permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.addMetadataSchemaPermissionWithHttpInfo = function(uuid, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling addMetadataSchemaPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addMetadataSchemaPermission");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}/pems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add a user permission for the given schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {module:Model/Permission} body The schema permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.addMetadataSchemaPermission = function(uuid, body, opts) {
      return this.addMetadataSchemaPermissionWithHttpInfo(uuid, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all permissions on the given metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearMetadataPermissionsWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clearMetadataPermissions");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}/pems', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions on the given metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearMetadataPermissions = function(uuid, opts) {
      return this.clearMetadataPermissionsWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all permissions on the given schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearMetadataSchemaPermissionsWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling clearMetadataSchemaPermissions");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}/pems', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions on the given schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearMetadataSchemaPermissions = function(uuid, opts) {
      return this.clearMetadataSchemaPermissionsWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Metadata from the system.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteMetadataWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteMetadata");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove Metadata from the system.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteMetadata = function(uuid, opts) {
      return this.deleteMetadataWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Removes user permissions for a user on a given metadata resource.
     * @param {String} uuid The uuid of the metadata item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteMetadataPermissionWithHttpInfo = function(uuid, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteMetadataPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteMetadataPermission");
      }


      var pathParams = {
        'uuid': uuid,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}/pems/{username}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Removes user permissions for a user on a given metadata resource.
     * @param {String} uuid The uuid of the metadata item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteMetadataPermission = function(uuid, username, opts) {
      return this.deleteMetadataPermissionWithHttpInfo(uuid, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Remove Metadata Schema from the system.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteMetadataSchemaWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteMetadataSchema");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Remove Metadata Schema from the system.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteMetadataSchema = function(uuid, opts) {
      return this.deleteMetadataSchemaWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all metadata schema permissions on the given metadata.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteSchemaPermissionWithHttpInfo = function(uuid, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling deleteSchemaPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteSchemaPermission");
      }


      var pathParams = {
        'uuid': uuid,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}/pems/{username}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all metadata schema permissions on the given metadata.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteSchemaPermission = function(uuid, username, opts) {
      return this.deleteSchemaPermissionWithHttpInfo(uuid, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Metadata} and HTTP response
     */
    this.getMetadataWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getMetadata");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metadata;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Metadata}
     */
    this.getMetadata = function(uuid, opts) {
      return this.getMetadataWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the user permission for this metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.getMetadataPermissionWithHttpInfo = function(uuid, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getMetadataPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getMetadataPermission");
      }


      var pathParams = {
        'uuid': uuid,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}/pems/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the user permission for this metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.getMetadataPermission = function(uuid, username, opts) {
      return this.getMetadataPermissionWithHttpInfo(uuid, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Retrieve Metadata Schemata.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MetadataSchema} and HTTP response
     */
    this.getMetadataSchemaWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getMetadataSchema");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetadataSchema;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Retrieve Metadata Schemata.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetadataSchema}
     */
    this.getMetadataSchema = function(uuid, opts) {
      return this.getMetadataSchemaWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the user permission for this schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.getMetadataSchemaPermissionWithHttpInfo = function(uuid, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling getMetadataSchemaPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getMetadataSchemaPermission");
      }


      var pathParams = {
        'uuid': uuid,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}/pems/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the user permission for this schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {String} username The username of the permission owner
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.getMetadataSchemaPermission = function(uuid, username, opts) {
      return this.getMetadataSchemaPermissionWithHttpInfo(uuid, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and/or search metadata.
     * @param {String} q The query to perform. Traditional MongoDB queries are supported
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Metadata>} and HTTP response
     */
    this.listMetadataWithHttpInfo = function(q, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling listMetadata");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Metadata];

      return this.apiClient.callApi(
        '/meta/v2/data', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and/or search metadata.
     * @param {String} q The query to perform. Traditional MongoDB queries are supported
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Metadata>}
     */
    this.listMetadata = function(q, opts) {
      return this.listMetadataWithHttpInfo(q, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the permission ACL for this metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.listMetadataPermissionsWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling listMetadataPermissions");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}/pems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the permission ACL for this metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.listMetadataPermissions = function(uuid, opts) {
      return this.listMetadataPermissionsWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List and query Metadata Schemata.
     * @param {String} q A valid query object defining the search parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/MetadataSchema>} and HTTP response
     */
    this.listMetadataSchemaWithHttpInfo = function(q, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling listMetadataSchema");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q,
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [MetadataSchema];

      return this.apiClient.callApi(
        '/meta/v2/schemas', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List and query Metadata Schemata.
     * @param {String} q A valid query object defining the search parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/MetadataSchema>}
     */
    this.listMetadataSchema = function(q, opts) {
      return this.listMetadataSchemaWithHttpInfo(q, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the permission for this schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Permission>} and HTTP response
     */
    this.listMetadataSchemaPermissionsWithHttpInfo = function(uuid, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling listMetadataSchemaPermissions");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}/pems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the permission for this schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Permission>}
     */
    this.listMetadataSchemaPermissions = function(uuid, opts) {
      return this.listMetadataSchemaPermissionsWithHttpInfo(uuid, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update or Add new Metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {module:Model/Metadata} body The metadata to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Metadata} and HTTP response
     */
    this.updateMetadataWithHttpInfo = function(uuid, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateMetadata");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMetadata");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Metadata;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update or Add new Metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {module:Model/Metadata} body The metadata to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Metadata}
     */
    this.updateMetadata = function(uuid, body, opts) {
      return this.updateMetadataWithHttpInfo(uuid, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a user permission for the given metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {String} username The username of the permission owner
     * @param {module:Model/Permission} body The metadata permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.updateMetadataPermissionWithHttpInfo = function(uuid, username, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateMetadataPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateMetadataPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMetadataPermission");
      }


      var pathParams = {
        'uuid': uuid,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/data/{uuid}/pems/{username}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update a user permission for the given metadata.
     * @param {String} uuid The uuid of the metadata item
     * @param {String} username The username of the permission owner
     * @param {module:Model/Permission} body The metadata permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.updateMetadataPermission = function(uuid, username, body, opts) {
      return this.updateMetadataPermissionWithHttpInfo(uuid, username, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an existing Metadata Schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {module:Model/Permission} body A valid JSON Schema object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/MetadataSchema} and HTTP response
     */
    this.updateMetadataSchemaWithHttpInfo = function(uuid, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateMetadataSchema");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMetadataSchema");
      }


      var pathParams = {
        'uuid': uuid
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MetadataSchema;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an existing Metadata Schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {module:Model/Permission} body A valid JSON Schema object
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/MetadataSchema}
     */
    this.updateMetadataSchema = function(uuid, body, opts) {
      return this.updateMetadataSchemaWithHttpInfo(uuid, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or update a user permission for the given metadata schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {String} username The username of the permission owner
     * @param {module:Model/Permission} body The schema permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.updateMetadataSchemaPermissionWithHttpInfo = function(uuid, username, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'uuid' is set
      if (uuid === undefined || uuid === null) {
        throw new Error("Missing the required parameter 'uuid' when calling updateMetadataSchemaPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateMetadataSchemaPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateMetadataSchemaPermission");
      }


      var pathParams = {
        'uuid': uuid,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/meta/v2/schemas/{uuid}/pems/{username}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add or update a user permission for the given metadata schema.
     * @param {String} uuid The uuid of the metadata schema item
     * @param {String} username The username of the permission owner
     * @param {module:Model/Permission} body The schema permission to update.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.updateMetadataSchemaPermission = function(uuid, username, body, opts) {
      return this.updateMetadataSchemaPermissionWithHttpInfo(uuid, username, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
