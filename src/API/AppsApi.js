/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/Application', 'Model/ApplicationAction', 'Model/ApplicationSummary', 'Model/HistoryEvent', 'Model/Permission'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/Application'), require('../Model/ApplicationAction'), require('../Model/ApplicationSummary'), require('../Model/HistoryEvent'), require('../Model/Permission'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.AppsApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.Application, root.AgaveJsSdk.ApplicationAction, root.AgaveJsSdk.ApplicationSummary, root.AgaveJsSdk.HistoryEvent, root.AgaveJsSdk.Permission);
  }
}(this, function(ApiClient, Application, ApplicationAction, ApplicationSummary, HistoryEvent, Permission) {
  'use strict';

  /**
   * Apps service.
   * @module API/AppsApi
   * @version 0.1.0
   */

  /**
   * Constructs a new AppsApi. 
   * @alias module:API/AppsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Register and update new applications.
     * @param {Object} opts Optional parameters
     * @param {module:Model/Application} opts.body The description of the app to add or update. 
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Application} and HTTP response
     */
    this.addAppWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = opts['body'];


      var pathParams = {
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/apps/v2/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Register and update new applications.
     * @param {Object} opts Optional parameters
     * @param {module:Model/Application} opts.body The description of the app to add or update. 
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Application}
     */
    this.addApp = function(opts) {
      return this.addAppWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Grant a user permission for an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {module:Model/Permission} body The permission add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.addAppPermissionWithHttpInfo = function(appId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling addAppPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addAppPermission");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/apps/v2/{appId}/pems', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Grant a user permission for an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {module:Model/Permission} body The permission add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.addAppPermission = function(appId, body, opts) {
      return this.addAppPermissionWithHttpInfo(appId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all permissions on an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearAppPermissionsWithHttpInfo = function(appId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling clearAppPermissions");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/apps/v2/{appId}/pems', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions on an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearAppPermissions = function(appId, opts) {
      return this.clearAppPermissionsWithHttpInfo(appId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAppWithHttpInfo = function(appId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/apps/v2/{appId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteApp = function(appId, opts) {
      return this.deleteAppWithHttpInfo(appId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes all permissions for the given user on an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {String} username The username of the api user associated with the permission
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteAppPermissionWithHttpInfo = function(appId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling deleteAppPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling deleteAppPermission");
      }


      var pathParams = {
        'appId': appId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/apps/v2/{appId}/pems/{username}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions for the given user on an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {String} username The username of the api user associated with the permission
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteAppPermission = function(appId, username, opts) {
      return this.deleteAppPermissionWithHttpInfo(appId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get details of an application by its unique id.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Application} and HTTP response
     */
    this.getAppDetailsWithHttpInfo = function(appId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppDetails");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/apps/v2/{appId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get details of an application by its unique id.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Application}
     */
    this.getAppDetails = function(appId, opts) {
      return this.getAppDetailsWithHttpInfo(appId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a specific user permission for an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {String} username The username of the api user associated with the permission.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.getAppPermissionWithHttpInfo = function(appId, username, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling getAppPermission");
      }


      var pathParams = {
        'appId': appId,
        'username': username
      };
      var queryParams = {
        'filter': opts['filter'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/apps/v2/{appId}/pems/{username}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a specific user permission for an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {String} username The username of the api user associated with the permission.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.getAppPermission = function(appId, username, opts) {
      return this.getAppPermissionWithHttpInfo(appId, username, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a submission form for the named application.
     * @param {String} appId The app for which to create the form
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link 'String'} and HTTP response
     */
    this.getAppSubmissionFormWithHttpInfo = function(appId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling getAppSubmissionForm");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/apps/v2/{appId}/form', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a submission form for the named application.
     * @param {String} appId The app for which to create the form
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link 'String'}
     */
    this.getAppSubmissionForm = function(appId, opts) {
      return this.getAppSubmissionFormWithHttpInfo(appId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Edit an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {module:Model/ApplicationAction} body The operation to perform.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Application} and HTTP response
     */
    this.invokeAppActionWithHttpInfo = function(appId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling invokeAppAction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeAppAction");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/apps/v2/{appId}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Edit an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {module:Model/ApplicationAction} body The operation to perform.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Application}
     */
    this.invokeAppAction = function(appId, body, opts) {
      return this.invokeAppActionWithHttpInfo(appId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List the event history of this app
     * @param {String} appId The id of the app for which the history will be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The event status
     * @param {String} opts.created The date the event occurred
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/HistoryEvent} and HTTP response
     */
    this.listAppHistoryWithHttpInfo = function(appId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAppHistory");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'status': opts['status'],
        'created': opts['created'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistoryEvent;

      return this.apiClient.callApi(
        '/apps/v2/{appId}/history', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List the event history of this app
     * @param {String} appId The id of the app for which the history will be returned
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The event status
     * @param {String} opts.created The date the event occurred
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/HistoryEvent}
     */
    this.listAppHistory = function(appId, opts) {
      return this.listAppHistoryWithHttpInfo(appId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get the permission for this application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/Permission>} and HTTP response
     */
    this.listAppPermissionsWithHttpInfo = function(appId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling listAppPermissions");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'filter': opts['filter'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Permission];

      return this.apiClient.callApi(
        '/apps/v2/{appId}/pems', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get the permission for this application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/Permission>}
     */
    this.listAppPermissions = function(appId, opts) {
      return this.listAppPermissionsWithHttpInfo(appId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List apps
     * Get a list of available applications.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._public Whether to return only public apps. (Acceptable values are: \&quot;true\&quot;, \&quot;false\&quot;)
     * @param {String} opts.name The name of the app
     * @param {String} opts.executionSystem The execution system of the system
     * @param {String} opts.tags A free text tag associated with an app
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/ApplicationSummary>} and HTTP response
     */
    this.listAppsWithHttpInfo = function(opts) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'public': opts['_public'],
        'name': opts['name'],
        'executionSystem': opts['executionSystem'],
        'tags': opts['tags'],
        'filter': opts['filter'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ApplicationSummary];

      return this.apiClient.callApi(
        '/apps/v2/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List apps
     * Get a list of available applications.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts._public Whether to return only public apps. (Acceptable values are: \&quot;true\&quot;, \&quot;false\&quot;)
     * @param {String} opts.name The name of the app
     * @param {String} opts.executionSystem The execution system of the system
     * @param {String} opts.tags A free text tag associated with an app
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/ApplicationSummary>}
     */
    this.listApps = function(opts) {
      return this.listAppsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {module:Model/Application} body The description of the app to add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Application} and HTTP response
     */
    this.updateAppWithHttpInfo = function(appId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateApp");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateApp");
      }


      var pathParams = {
        'appId': appId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Application;

      return this.apiClient.callApi(
        '/apps/v2/{appId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {module:Model/Application} body The description of the app to add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Application}
     */
    this.updateApp = function(appId, body, opts) {
      return this.updateAppWithHttpInfo(appId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Add or update a user permission for an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {String} username The username of the api user associated with the permission
     * @param {module:Model/Permission} body The permission add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/Permission} and HTTP response
     */
    this.updateAppPermissionWithHttpInfo = function(appId, username, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'appId' is set
      if (appId === undefined || appId === null) {
        throw new Error("Missing the required parameter 'appId' when calling updateAppPermission");
      }

      // verify the required parameter 'username' is set
      if (username === undefined || username === null) {
        throw new Error("Missing the required parameter 'username' when calling updateAppPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateAppPermission");
      }


      var pathParams = {
        'appId': appId,
        'username': username
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Permission;

      return this.apiClient.callApi(
        '/apps/v2/{appId}/pems/{username}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Add or update a user permission for an application.
     * @param {String} appId The id of the application. The application id is made up of the name and version separated by a dash.
     * @param {String} username The username of the api user associated with the permission
     * @param {module:Model/Permission} body The permission add or update. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/Permission}
     */
    this.updateAppPermission = function(appId, username, body, opts) {
      return this.updateAppPermissionWithHttpInfo(appId, username, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
