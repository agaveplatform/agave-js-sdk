/**
 * Agave Platform Science API
 * Power your digital lab and reduce the time from theory to discovery using the Agave Science-as-a-Service API Platform. Agave provides hosted services that allow researchers to manage data, conduct experiments, and publish and share results from anywhere at any time.
 *
 * OpenAPI spec version: 2.2.14
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: unset
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'Model/FileAction', 'Model/FileImportRequest', 'Model/FileInfo', 'Model/FilePermission', 'Model/FilePermissionRequest', 'Model/HistoryEvent', 'Model/PermissionRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../Model/FileAction'), require('../Model/FileImportRequest'), require('../Model/FileInfo'), require('../Model/FilePermission'), require('../Model/FilePermissionRequest'), require('../Model/HistoryEvent'), require('../Model/PermissionRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.AgaveJsSdk) {
      root.AgaveJsSdk = {};
    }
    root.AgaveJsSdk.FilesApi = factory(root.AgaveJsSdk.ApiClient, root.AgaveJsSdk.FileAction, root.AgaveJsSdk.FileImportRequest, root.AgaveJsSdk.FileInfo, root.AgaveJsSdk.FilePermission, root.AgaveJsSdk.FilePermissionRequest, root.AgaveJsSdk.HistoryEvent, root.AgaveJsSdk.PermissionRequest);
  }
}(this, function(ApiClient, FileAction, FileImportRequest, FileInfo, FilePermission, FilePermissionRequest, HistoryEvent, PermissionRequest) {
  'use strict';

  /**
   * Files service.
   * @module API/FilesApi
   * @version 0.1.0
   */

  /**
   * Constructs a new FilesApi. 
   * @alias module:API/FilesApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * Deletes all permissions on a file except those of the owner.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {String} systemId The id of the system on which the file item lives.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.clearFileItemPermissionsWithHttpInfo = function(filePath, systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling clearFileItemPermissions");
      }

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling clearFileItemPermissions");
      }


      var pathParams = {
        'filePath': filePath,
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/files/v2/pems/system/{systemId}/{filePath}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes all permissions on a file except those of the owner.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {String} systemId The id of the system on which the file item lives.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.clearFileItemPermissions = function(filePath, systemId, opts) {
      return this.clearFileItemPermissionsWithHttpInfo(filePath, systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a file or folder at the specified path on the specified remote system.
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFileItemWithHttpInfo = function(systemId, filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling deleteFileItem");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling deleteFileItem");
      }


      var pathParams = {
        'systemId': systemId,
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/files/v2/media/system/{systemId}/{filePath}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a file or folder at the specified path on the specified remote system.
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFileItem = function(systemId, filePath, opts) {
      return this.deleteFileItemWithHttpInfo(systemId, filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Deletes a file or folder on default storage system of the user
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.deleteFileItemOnDefaultSystemWithHttpInfo = function(filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling deleteFileItemOnDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/files/v2/media/{filePath}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Deletes a file or folder on default storage system of the user
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.deleteFileItemOnDefaultSystem = function(filePath, opts) {
      return this.deleteFileItemOnDefaultSystemWithHttpInfo(filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a file from the given system
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.downloadFileItemWithHttpInfo = function(systemId, filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling downloadFileItem");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling downloadFileItem");
      }


      var pathParams = {
        'systemId': systemId,
        'filePath': filePath
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = null;

      return this.apiClient.callApi(
        '/files/v2/media/system/{systemId}/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download a file from the given system
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Boolean flag to indicate whether the Content-Disposition header should be set to force a browser download. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.downloadFileItem = function(systemId, filePath, opts) {
      return this.downloadFileItemWithHttpInfo(systemId, filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a file from the default storage location of the user.
     * @param {String} filePath The path of the file relative to the default storage location of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    this.downloadFileItemOnDefaultSystemWithHttpInfo = function(filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling downloadFileItemOnDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'force': opts['force'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/octet-stream'];
      var returnType = null;

      return this.apiClient.callApi(
        '/files/v2/media/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download a file from the default storage location of the user.
     * @param {String} filePath The path of the file relative to the default storage location of the user
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.force Boolean flag to indicate whether the Content-Disposition header should be set to force browser file download. (default to false)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    this.downloadFileItemOnDefaultSystem = function(filePath, opts) {
      return this.downloadFileItemOnDefaultSystemWithHttpInfo(filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import file item from a remote URL to the target system
     * @param {String} systemId The id of the system.
     * @param {String} filePath The relative or absolute path where the file item should be imported
     * @param {module:Model/FileImportRequest} body The import request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/FileInfo} and HTTP response
     */
    this.importFileItemWithHttpInfo = function(systemId, filePath, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling importFileItem");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling importFileItem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importFileItem");
      }


      var pathParams = {
        'systemId': systemId,
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileInfo;

      return this.apiClient.callApi(
        '/files/v2/media/system/{systemId}/{filePath}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Import file item from a remote URL to the target system
     * @param {String} systemId The id of the system.
     * @param {String} filePath The relative or absolute path where the file item should be imported
     * @param {module:Model/FileImportRequest} body The import request
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/FileInfo}
     */
    this.importFileItem = function(systemId, filePath, body, opts) {
      return this.importFileItemWithHttpInfo(systemId, filePath, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Import file item from a remote URL to the target system
     * @param {String} filePath The relative or absolute path where the file item should be imported
     * @param {module:Model/FileImportRequest} body The import request
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/FileInfo} and HTTP response
     */
    this.importFileItemToDefaultSystemWithHttpInfo = function(filePath, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling importFileItemToDefaultSystem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling importFileItemToDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FileInfo;

      return this.apiClient.callApi(
        '/files/v2/media/{filePath}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Import file item from a remote URL to the target system
     * @param {String} filePath The relative or absolute path where the file item should be imported
     * @param {module:Model/FileImportRequest} body The import request
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/FileInfo}
     */
    this.importFileItemToDefaultSystem = function(filePath, body, opts) {
      return this.importFileItemToDefaultSystemWithHttpInfo(filePath, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Perform an action on a file or folder.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {module:Model/FileAction} body The operation to perform
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.invokeFileActionOnDefaultSystemWithHttpInfo = function(filePath, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling invokeFileActionOnDefaultSystem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeFileActionOnDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/files/v2/media/{filePath}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform an action on a file or folder.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {module:Model/FileAction} body The operation to perform
     * @param {Object} opts Optional parameters
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.invokeFileActionOnDefaultSystem = function(filePath, body, opts) {
      return this.invokeFileActionOnDefaultSystemWithHttpInfo(filePath, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Perform an action on a file or folder.
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {module:Model/FileAction} body The operation to perform. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Object} and HTTP response
     */
    this.invokeFileItemActionWithHttpInfo = function(systemId, filePath, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling invokeFileItemAction");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling invokeFileItemAction");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling invokeFileItemAction");
      }


      var pathParams = {
        'systemId': systemId,
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/files/v2/media/system/{systemId}/{filePath}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Perform an action on a file or folder.
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {module:Model/FileAction} body The operation to perform. 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Object}
     */
    this.invokeFileItemAction = function(systemId, filePath, body, opts) {
      return this.invokeFileItemActionWithHttpInfo(systemId, filePath, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Download a file from the default storage location of the user.
     * @param {String} filePath The path of the file relative to the given system root location.
     * @param {String} systemId The system on which the file item resides
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The status of the event
     * @param {String} opts.created The date the event occurred
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/HistoryEvent} and HTTP response
     */
    this.listFileItemHistoryWithHttpInfo = function(filePath, systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling listFileItemHistory");
      }

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling listFileItemHistory");
      }


      var pathParams = {
        'filePath': filePath,
        'systemId': systemId
      };
      var queryParams = {
        'status': opts['status'],
        'created': opts['created'],
        'filter': opts['filter'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = HistoryEvent;

      return this.apiClient.callApi(
        '/files/v2/history/system/{systemId}/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Download a file from the default storage location of the user.
     * @param {String} filePath The path of the file relative to the given system root location.
     * @param {String} systemId The system on which the file item resides
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The status of the event
     * @param {String} opts.created The date the event occurred
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/HistoryEvent}
     */
    this.listFileItemHistory = function(filePath, systemId, opts) {
      return this.listFileItemHistoryWithHttpInfo(filePath, systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List event history of a file item on the default storage system of the user
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The event status
     * @param {String} opts.created The date the event occurred
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/HistoryEvent>} and HTTP response
     */
    this.listFileItemHistoryOnDefaultSystemWithHttpInfo = function(filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling listFileItemHistoryOnDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'status': opts['status'],
        'created': opts['created'],
        'filter': opts['filter'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [HistoryEvent];

      return this.apiClient.callApi(
        '/files/v2/history/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List event history of a file item on the default storage system of the user
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {String} opts.status The event status
     * @param {String} opts.created The date the event occurred
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/HistoryEvent>}
     */
    this.listFileItemHistoryOnDefaultSystem = function(filePath, opts) {
      return this.listFileItemHistoryOnDefaultSystemWithHttpInfo(filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all the share permissions for a file or folder.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {String} systemId The system id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/FilePermission>} and HTTP response
     */
    this.listFileItemPermissionsWithHttpInfo = function(filePath, systemId, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling listFileItemPermissions");
      }

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling listFileItemPermissions");
      }


      var pathParams = {
        'filePath': filePath,
        'systemId': systemId
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FilePermission];

      return this.apiClient.callApi(
        '/files/v2/pems/system/{systemId}/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all the share permissions for a file or folder.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {String} systemId The system id
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/FilePermission>}
     */
    this.listFileItemPermissions = function(filePath, systemId, opts) {
      return this.listFileItemPermissionsWithHttpInfo(filePath, systemId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all the share permissions for a file or folder.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/FilePermission>} and HTTP response
     */
    this.listFileItemPermissionsOnDefaultSystemWithHttpInfo = function(filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling listFileItemPermissionsOnDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FilePermission];

      return this.apiClient.callApi(
        '/files/v2/pems/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * List all the share permissions for a file or folder.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/FilePermission>}
     */
    this.listFileItemPermissionsOnDefaultSystem = function(filePath, opts) {
      return this.listFileItemPermissionsOnDefaultSystemWithHttpInfo(filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a remote directory listing on a specific system.
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/FileInfo>} and HTTP response
     */
    this.listFileItemsWithHttpInfo = function(systemId, filePath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling listFileItems");
      }

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling listFileItems");
      }


      var pathParams = {
        'systemId': systemId,
        'filePath': filePath
      };
      var queryParams = {
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FileInfo];

      return this.apiClient.callApi(
        '/files/v2/listings/system/{systemId}/{filePath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a remote directory listing on a specific system.
     * @param {String} systemId The unique id of the system on which the data resides.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/FileInfo>}
     */
    this.listFileItems = function(systemId, filePath, opts) {
      return this.listFileItemsWithHttpInfo(systemId, filePath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a remote directory listing on the default storage system of the user
     * @param {String} filepath The path of the file relative to the default storage location of the user
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:Model/FileInfo>} and HTTP response
     */
    this.listFileItemsOnDefaultSystemWithHttpInfo = function(filepath, opts) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'filepath' is set
      if (filepath === undefined || filepath === null) {
        throw new Error("Missing the required parameter 'filepath' when calling listFileItemsOnDefaultSystem");
      }


      var pathParams = {
        'filepath': filepath
      };
      var queryParams = {
        'filter': opts['filter'],
        'naked': opts['naked'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FileInfo];

      return this.apiClient.callApi(
        '/files/v2/listings/{filepath}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Get a remote directory listing on the default storage system of the user
     * @param {String} filepath The path of the file relative to the default storage location of the user
     * @param {Object} opts Optional parameters
     * @param {String} opts.filter A comma-separated list of fields in the response objects to return. This allows developers to create their own response objects (default to *)
     * @param {String} opts.naked If true, the response wrapper is stripped and the raw object is returned (default to true)
     * @param {Number} opts.limit The maximum number of results returned from this query (default to 100)
     * @param {Number} opts.offset The number of results skipped in the result set returned from this query (default to 0)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:Model/FileInfo>}
     */
    this.listFileItemsOnDefaultSystem = function(filepath, opts) {
      return this.listFileItemsOnDefaultSystemWithHttpInfo(filepath, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions for a single user.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {String} systemId The id of the system on which the file resides
     * @param {module:Model/PermissionRequest} body The updated permission value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/FilePermission} and HTTP response
     */
    this.updateFileItemPermissionWithHttpInfo = function(filePath, systemId, body, opts) {
      opts = opts || {};
      var postBody = body;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling updateFileItemPermission");
      }

      // verify the required parameter 'systemId' is set
      if (systemId === undefined || systemId === null) {
        throw new Error("Missing the required parameter 'systemId' when calling updateFileItemPermission");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFileItemPermission");
      }


      var pathParams = {
        'filePath': filePath,
        'systemId': systemId
      };
      var queryParams = {
        'naked': opts['naked'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilePermission;

      return this.apiClient.callApi(
        '/files/v2/pems/system/{systemId}/{filePath}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update permissions for a single user.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {String} systemId The id of the system on which the file resides
     * @param {module:Model/PermissionRequest} body The updated permission value
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.naked  (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/FilePermission}
     */
    this.updateFileItemPermission = function(filePath, systemId, body, opts) {
      return this.updateFileItemPermissionWithHttpInfo(filePath, systemId, body, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update permissions for a single user on their default storage system.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {module:Model/FilePermissionRequest} body The permission add or update. 
     * @param {Boolean} filePath2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Model/FilePermission} and HTTP response
     */
    this.updateFileItemPermissionsOnDefaultSystemWithHttpInfo = function(filePath, body, filePath2) {
      var postBody = body;

      // verify the required parameter 'filePath' is set
      if (filePath === undefined || filePath === null) {
        throw new Error("Missing the required parameter 'filePath' when calling updateFileItemPermissionsOnDefaultSystem");
      }

      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateFileItemPermissionsOnDefaultSystem");
      }

      // verify the required parameter 'filePath2' is set
      if (filePath2 === undefined || filePath2 === null) {
        throw new Error("Missing the required parameter 'filePath2' when calling updateFileItemPermissionsOnDefaultSystem");
      }


      var pathParams = {
        'filePath': filePath
      };
      var queryParams = {
        'filePath': filePath2,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['agaveImplicit'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FilePermission;

      return this.apiClient.callApi(
        '/files/v2/pems/{filePath}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Update permissions for a single user on their default storage system.
     * @param {String} filePath The path of the file relative to the default storage location of the user.
     * @param {module:Model/FilePermissionRequest} body The permission add or update. 
     * @param {Boolean} filePath2 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Model/FilePermission}
     */
    this.updateFileItemPermissionsOnDefaultSystem = function(filePath, body, filePath2) {
      return this.updateFileItemPermissionsOnDefaultSystemWithHttpInfo(filePath, body, filePath2)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
